<script language="javascript" type="text/javascript">
var lanIPv4Cfg;
var lanIgmpCfg;
var dhcpCfg;
var subMask = ["255.255.255.0", "255.255.0.0", "255.0.0.0", n_str.dhcp.t_custom];

var oldLanIp;
var oldLanMask;

function initEdit(brList, ix) {

    //$.loadPage("ipv6Edit", "lan6.htm");

    lanIPv4Cfg = $.act(ACT_GS, LAN_IP_INTF, null, brList[ix].__stack, ["IPInterfaceIPAddress", "IPInterfaceSubnetMask", "X_TP_MACAddress"]);
    lanIgmpCfg = $.act(ACT_GET, LAN_IGMP_SNOOP, brList[ix].__stack, null, ["enabled"]);
    dhcpCfg = $.act(ACT_GET, LAN_HOST_CFG, brList[ix].__stack, null, null);

    if (!$.exe()) {
        $("#lanMacAddress").prop("value", lanIPv4Cfg[0].X_TP_MACAddress);

        oldLanIp = lanIPv4Cfg[0].IPInterfaceIPAddress ? lanIPv4Cfg[0].IPInterfaceIPAddress : "0.0.0.0";
        $("#lanIPAddr").val(oldLanIp);

        oldLanMask = lanIPv4Cfg[0].IPInterfaceSubnetMask ? lanIPv4Cfg[0].IPInterfaceSubnetMask : "0.0.0.0";

        for (var ix = 0; ix < subMask.length; ix++) {
            if (subMask[ix] == oldLanMask) {
                break;
            }
        }

        if (ix >= subMask.length) {
            $("#lanIPSubMask option[value=" + (ix - 1) + "]").prop("selected", "selected");
            $("#lanIPSubMaskCustomInput").val(oldLanMask);
        }

        $("#lanIPSubMask option[value=" + ix + "]").prop("selected", "selected");

        $("#lanIGMPEn").prop("checked", lanIgmpCfg.enabled == 1 ? true : false);

        //secondIp
        if (lanIPv4Cfg.length == 1) {
            $("#secIp_en").prop("checked", false);
            $("#secIpCont").addClass("nd");
        } else if (lanIPv4Cfg.length == 2) {
            $("#secIp_en").prop("checked", true);
            $("#secIpCont").removeClass("nd");
            $("#secIp").val(lanIPv4Cfg[1].IPInterfaceIPAddress == "" ? "0.0.0.0" : lanIPv4Cfg[1].IPInterfaceIPAddress);
            $("#secMask").val(lanIPv4Cfg[1].IPInterfaceSubnetMask == "" ? "0.0.0.0" : lanIPv4Cfg[1].IPInterfaceSubnetMask);
        }

        if (dhcpCfg.DHCPServerEnable == 1) {
            $("#dhcpEn").prop("checked", true);
            $("#dhcpCont").removeClass("nd");
        } else {
            $("#dhcpEn").prop("checked", false);
            $("#dhcpCont").addClass("nd");
        }
        $("#dhcpRelay").prop("checked", dhcpCfg.DHCPRelay == 1 ? true : false);
        $("#ip1").val((dhcpCfg.minAddress) ? dhcpCfg.minAddress : ("0.0.0.0"));
        $("#ip2").val((dhcpCfg.maxAddress) ? dhcpCfg.maxAddress : ("0.0.0.0"));
        $("#lease").val((dhcpCfg.DHCPLeaseTime == "") ? 1440 : (dhcpCfg.DHCPLeaseTime / 60));
        $("#gateway").val((dhcpCfg.IPRouters == "") ? "0.0.0.0" : dhcpCfg.IPRouters);
        $("#domain").val((dhcpCfg.domainName == "") ? "" : dhcpCfg.domainName);
        $("#dnsserver1").val((dhcpCfg.DNSServers == "") ? "0.0.0.0" : (dhcpCfg.DNSServers).split(",")[0]);
        $("#dnsserver2").val((dhcpCfg.DNSServers == "") ? "0.0.0.0" : (dhcpCfg.DNSServers).split(",")[1]);
        $("#rmtSrv").val(dhcpCfg.X_TP_DhcpRelayServer);
    }
}


function clickIPv4Save() {
    var ipv4Settings = {};
    var igmpSettings = {};
    var dhcpSettings = {};
    var secIpSettings = {};

    if (checkParam() == false) {
        return false;
    }

    var bReboot = false;
    var tmpLanIp = $("#lanIPAddr").val() == "" ? "0.0.0.0" : $.ip2ip($("#lanIPAddr").val());

    var tmpLanMask = $("select#lanIPSubMask").data("text") == n_str.dhcp.t_custom ?
        $("#lanIPSubMaskCustomInput").val() : $("select#lanIPSubMask").data("text");
    tmpLanMask = $.ip2ip(tmpLanMask);

    if (($.ip2num(oldLanIp) != $.ip2num(tmpLanIp) || $.ip2num(oldLanMask) != $.ip2num(tmpLanMask))) {
        bReboot = true;
    }

    igmpSettings.enabled = $("#lanIGMPEn").prop('data-checked') == true ? 1 : 0;

    if ($("#dhcpEn").prop("data-checked") == true) {
        dhcpSettings.DHCPServerEnable = 1;
        dhcpSettings.DHCPRelay = $("#dhcpRelay").prop("checked") == true ? 1 : 0;
    } else {
        dhcpSettings.DHCPServerEnable = 0;
    }

    if (dhcpSettings.DHCPServerEnable == 1 && dhcpSettings.DHCPRelay == 1) {
        dhcpSettings.X_TP_DhcpRelayServer = $.ip2ip($("#rmtSrv").val());
    } else if (dhcpSettings.DHCPServerEnable == 1) {
        dhcpSettings.minAddress = $.ip2ip($("#ip1").val());
        dhcpSettings.maxAddress = $.ip2ip($("#ip2").val());

        dhcpSettings.IPRouters = $.ip2ip($("#gateway").val());
        dhcpSettings.DHCPLeaseTime = $("#lease").val() * 60;
        dhcpSettings.domainName = $("#domain").val();

        dhcpSettings.DNSServers = ($("#dnsserver1").val() == "" ? "0.0.0.0" : $.ip2ip($("#dnsserver1").val())) + "," +
            ($("#dnsserver2").val() == "" ? "0.0.0.0" : $.ip2ip($("#dnsserver2").val()));

    }

    //secIp
    secIpSettings.IPInterfaceIPAddress = $("#secIp").val() == "" ? "0.0.0.0" : $.ip2ip($("#secIp").val());
    secIpSettings.IPInterfaceSubnetMask = $("#secMask").val() == "" ? "0.0.0.0" : $.ip2ip($("#secMask").val());

    var accUrl = document.location.href.split('/')[2];
    var accIp = accUrl.split(':')[0];
    var accPort = 80;
    if (accUrl.split(':').length > 1) {
        accPort = accUrl.split(':')[1];
    }

    var bSecIpDiff = false;

    if ($("#secIp_en").prop("checked") == true) {
        if (lanIPv4Cfg.length == 1) {
            var pStk = lanIPv4Cfg[0].__stack.split(",")[0] + ",0,0,0,0,0";
            $.act(ACT_ADD, LAN_IP_INTF, null, pStk, secIpSettings);
        } else if (lanIPv4Cfg.length == 2) {
            $.act(ACT_SET, LAN_IP_INTF, lanIPv4Cfg[1].__stack, null, secIpSettings);
            var oldSecIp = lanIPv4Cfg[1].IPInterfaceIPAddress;
            var curSecIp = $.ip2ip($("#secIp").val());

            if (curSecIp != oldSecIp && accIp == oldSecIp) {
                bSecIpDiff = true;
            }
        }
    } else if (lanIPv4Cfg.length == 2) {
        $.act(ACT_DEL, LAN_IP_INTF, lanIPv4Cfg[1].__stack, null);
    }

    if (!bReboot) {
        $.act(ACT_SET, LAN_IGMP_SNOOP, lanIgmpCfg.__stack, null, igmpSettings);
        $.act(ACT_SET, LAN_HOST_CFG, dhcpCfg.__stack, null, dhcpSettings);

        if (!$.exe()) {
            if (bSecIpDiff) {
                $.refresh(curSecIp, accPort);
            } else {
                if (accIp != tmpLanIp) {
                    $.refresh(tmpLanIp, accPort);
                } else {
            $.removeLoading();
            $.reload();
        }
            }
        }
    } else {
        $.confirm(c_str.lan_reboot, goExcute, goBack);
    }

    function goExcute() {
        ipv4Settings.IPInterfaceIPAddress = tmpLanIp;
        ipv4Settings.IPInterfaceSubnetMask = tmpLanMask;

        $.act(ACT_SET, LAN_IP_INTF, lanIPv4Cfg[0].__stack, null, ipv4Settings);
        $.act(ACT_SET, LAN_IGMP_SNOOP, lanIgmpCfg.__stack, null, igmpSettings);
        $.act(ACT_SET, LAN_HOST_CFG, dhcpCfg.__stack, null, dhcpSettings);
        if (!$.exe()) {
            $.guage(["<span class='T T_rebooting'>" + s_str.rebooting + "</span>", "<span class='T T_wait_reboot'>" + s_str.wait_reboot + "</span>"], 100, 1200, 
            function() {
                if (window.location.href.search("tplinkmodem.net") == -1) {
                $.refresh(tmpLanIp);
                } else {
                    $.refresh();
                }
            });
        }
    }

    function goBack() {
        bReboot = false;
        return;
    }
}

function isSameLan(lan1Ip, lan1Mask, lan2Ip, lan2Mask) {
    var count = 0;
    lan1a = lan1Ip.split('.');
    lan1m = lan1Mask.split('.');
    lan2a = lan2Ip.split('.');
    lan2m = lan2Mask.split('.');
    for (i = 0; i < 4; i++) {
        l1a_n = parseInt(lan1a[i], 10);
        l1m_n = parseInt(lan1m[i], 10);
        l2a_n = parseInt(lan2a[i], 10);
        l2m_n = parseInt(lan2m[i], 10);

        if ((l1a_n & l1m_n) == (l2a_n & l2m_n))
            count++;
    }
    if (count == 4) {
        var testIp = $.ip2num(lan1Ip);
        var lanMask = $.ip2num(lan1Mask);
        if (((testIp & (~lanMask)) == 0) || ((testIp & (~lanMask)) == (~lanMask)))
            return false;
        else
            return true;
    } else {
        return false;
    }
}

function checkParam() {
    var element;
    var lanIp = $("#lanIPAddr").val();
    var netMask = $("select#lanIPSubMask").data("text") == n_str.dhcp.t_custom ?
        $("#lanIPSubMaskCustomInput").val() : $("select#lanIPSubMask").data("text");

    if ($.ifip(lanIp, true)) {
        $.alert(ERR_LAN_IP_INVAD);
        element = $("#lanIPAddr");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if ($.mask(netMask, true)) {
        $.alert(ERR_LAN_MASK_INVAD);
        element = $("select#lanIPSubMask").data("text") == "custom" ? $("#lanIPSubMaskCustomInput") : $("#lanIPSubMask");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if ($.ipmask(lanIp, netMask, true)) {
        $.alert(ERR_LAN_IPMASK_INVAD);
        element = $("#lanIPAddr");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }


    if ($.ifip($("#ip1").val(), true)) {
        $.alert(ERR_DHCP_START_IP_INVAD);
        element = $("#ip1");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if ($.ifip($("#ip2").val(), true)) {
        $.alert(ERR_DHCP_END_IP_INVAD);
        element = $("#ip2");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if ((parseInt($("#ip1").val().split(".")[3], 10) == 0) || (parseInt($("#ip1").val().split(".")[3], 10) == 255)) {
        $.alert(ERR_DHCP_START_IP_INVAD_1);
        element = $("#ip1");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if ((parseInt($("#ip2").val().split(".")[3], 10) == 0) || (parseInt($("#ip2").val().split(".")[3], 10) == 255)) {
        $.alert(ERR_DHCP_END_IP_INVAD_1);
        element = $("#ip2");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if (!$.isOrderIp($("#ip1").val(), $("#ip2").val())) {
        $.alert(ERR_TC_IP_ORDER_INVAD);
        element = $("#ip2");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if (!isSameLan($("#ip1").val(), netMask, lanIp, netMask)) {
        $.alert(ERR_DHCP_POOL_INVAD);
        element = $("#ip1");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if (!isSameLan($("#ip2").val(), netMask, lanIp, netMask)) {
        $.alert(ERR_DHCP_POOL_INVAD);
        element = $("#ip2");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if ($.num($("#lease").val(), [1, 2880], true)) {
        $.alert(ERR_DHCP_LEASE_INVAD);
        element = $("#lease");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if (($("#gateway").val() != "") && ($("#gateway").val() != "0.0.0.0") && ($.ifip($("#gateway").val(), true))) {
        $.alert(ERR_DHCP_GATEWAY_INVAD);
        element = $("#gateway");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if (($("#gateway").val() != "") && ($("#gateway").val() != "0.0.0.0") &&
        (!isSameLan($("#gateway").val(), netMask, lanIp, netMask))) {
        $.alert(ERR_GATEWAY_INVAD);
        element = $("#gateway");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if (($("#domain").val() != "") && (!$.isdomain($("#domain").val()))) {
        $.alert(ERR_DOMAIN_INVAD);
        element = $("#domain");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if (($("#dnsserver1").val() != "") && ($("#dnsserver1").val() != "0.0.0.0") && ($.ifip($("#dnsserver1").val(), true))) {
        $.alert(ERR_DHCP_DNS1_INVAD);
        element = $("#dnsserver1");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if (($("#dnsserver2").val() != "") && ($("#dnsserver2").val() != "0.0.0.0") && ($.ifip($("#dnsserver2").val(), true))) {
        $.alert(ERR_DHCP_DNS2_INVAD);
        element = $("#dnsserver2");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if (($("#dhcpRelay").prop("checked") == true) && (($("#rmtSrv").val() == "") || ($("#rmtSrv").val() == "0.0.0.0"))) {
        $.alert(ERR_DHCP_RMT_SRV_EMPTY);
        element = $("#rmtSrv");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    if (($("#rmtSrv").val() != "") && ($("#rmtSrv").val() != "0.0.0.0") && ($.ifip($("#rmtSrv").val(), true))) {
        $.alert(ERR_DHCP_RMT_SRV_INVAD);
        element = $("#rmtSrv");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

    if ($("#secIp_en").prop("checked") == true) {
        if ($.ifip($("#secIp").val(), true)) {
            $.alert(ERR_IP_FORMAT);
            element = $("#secIp");
            if (element) {
                element.focus();
                element.select();
            }
            return false;
        }
        if ($.mask($("#secMask").val(), true)) {
            $.alert(ERR_MASK_INVAD);
            element = $("#secMask");
            if (element) {
                element.focus();
                element.select();
            }
            return false;
        }
        if ($.ip2ip($("#secIp").val()) == $.ip2ip($("#lanIPAddr").val())) {
            $.alert(ERR_LAN_SEC_IP_INVAD);
            element = $("#secIp");
            if (element) {
                element.focus();
                element.select();
            }
            return false;
        }
    }

    return true;
}


function initDhcpEdit() {

    if (hasGroup) {

        $("#formIPv6").addClass('nd');
        $("#ipVersion").addClass('nd');
        $("#cancelIPv4").css('display', 'inline-block');

        if (brLanList[groupEditIndex].bridgeName == "Default") {
            $("#formIPv6").removeClass('nd');
            $("#ipVersion").removeClass('nd');
        }
        $("#hasGroupBtn").removeClass('nd');
        $("#noGroupBtn").addClass('nd');
        initEdit(brLanList, groupEditIndex);
    } else {
        $("#cancelIPv4").css('display', 'none');
        //$("#ipVersion").removeClass('nd');
        $("#hasGroupBtn").addClass('nd');
        $("#noGroupBtn").removeClass('nd');
        initEdit(brLanList, 0);
    }

}

function changeVersion() {
    if ($("#ipVer4").prop("checked")) {
        $("#formIPv4").removeClass("nd");
        $("#formIPv6").addClass("nd");
    } else if ($("#ipVer6").prop("checked")) {
        $("#formIPv4").addClass("nd");
        $("#formIPv6").removeClass("nd");
    }
}

function setDhcpAddresses() {
    var lanIp = $("#lanIPAddr").val();
    var netMask = $("select#lanIPSubMask").data("text") == n_str.dhcp.t_custom ?
        $("#lanIPSubMaskCustomInput").val() : $("select#lanIPSubMask").data("text");
    var addrParts;
    var maskParts;
    var poolStart = [];
    var poolEnd = [];
    var index;
    var pos;

    $("#ip1").val("");
    $("#ip2").val("");

    addrParts = lanIp.split('.');
    maskParts = netMask.split('.');


    for (index = 0; index < 4; index++) {
        poolStart[index] = addrParts[index] & maskParts[index];
    }
    poolStart[3] += 1;

    for (index = 0; index < 3; index++) {
        poolEnd[index] = poolStart[index];
    }
    pos = $.getrightfirstonebitpos(maskParts[3]);
    poolEnd[3] = poolStart[3] + Math.pow(2, pos) - 3;


    if ((poolEnd[3] >= 200) && (poolStart[3] <= 100)) {
        poolStart[3] = 100;
        poolEnd[3] = 199;
    }

    for (index = 0; index < 4; index++) {
        if (index == 3) {
            $("#ip1").val($("#ip1").val() + poolStart[index]);
            $("#ip2").val($("#ip2").val() + poolEnd[index]);
        } else {
            $("#ip1").val($("#ip1").val() + poolStart[index] + ".");
            $("#ip2").val($("#ip2").val() + poolEnd[index] + ".");
        }
    }

    $("#gateway").val(lanIp);
}
</script>
<div class="content-container">
    <div id="ipVersion" class="nd">
        <b class="xl" id="t_ipVer">IP Version:</b>
        <input type="radio" name="ipVer" id="ipVer4" checked="checked" />
        <label id="t_ipVer4">IPv4</label>
        <input type="radio" name="ipVer" id="ipVer6" />
        <label id="t_ipVer6">IPv6</label>
    </div>

    <form class="pure-form pure-form-aligned" id="formIPv4">
	<div class="nd">
        <div class="pure-control-group">
            <b class="xl T_macaddr">Mac address:</b>
            <input type="text" readonly="true" id="lanMacAddress" />
        </div>

        <div>
            <b class="xl T_ipaddr">LAN IPv4:</b>
            <input type="text" id="lanIPAddr" class="l" required />
        </div>

        <div class="inline">
            <b class="xl T_netmask">Subnet Mask:</b>
            <select id="lanIPSubMask" class="l">
                <option value="0">255.255.255.0</option>
                <option value="1">255.255.0.0</option>
                <option value="2">255.0.0.0</option>
                <option value="3" id="t_custom">custom</option>
            </select>
        </div>

        <div class="nd" id="lanIPSubMaskCustom" style="margin-left:20px">
            <input type="text" id="lanIPSubMaskCustomInput" class="l" required />
        </div>

        <div>
            <b class="xl" id="t_snoop">IGMP Snooping:</b>
            <input type="checkbox" id="lanIGMPEn" />
            <label id="t_ensnoop">Enable IGMP Snooping</label>
        </div>

        <div>
            <b class="xl" id="t_secIp">Second IP:</b>
            <input type="checkbox" id="secIp_en" />
            <label id="t_ensecip">Enable Second IP</label>
        </div>

        <div id="secIpCont" class="nd">
            <div>
                <b class="xl T_ipaddr">IP Address:</b>
                <input type="text" class="l" maxlength="15" id="secIp" value="0.0.0.0" />
            </div>

            <div>
                <b class="xl T_netmask">Subnet Mask:</b>
                <input type="text" class="l" maxlength="15" id="secMask" value="0.0.0.0" />
            </div>
        </div>
	</div>
        <div>
            <b class="xl" id="t_dhcp">DHCP Server:</b>
            <input type="checkbox" id="dhcpEn" />
            <label id="t_endhcp">Enable DHCP</label>
        </div>

        <div id="dhcpCont">
            <div class="nd">
                <b class="xl" id="d"></b>
                <input type="radio" name="dhcpfunc" id="dhcpServ" checked="checked" />
                <label id="t_dhcpserv">DHCP Server</label>
                <input type="radio" name="dhcpfunc" id="dhcpRelay" />
                <label id="t_relay">DHCP Relay</label>
            </div>

            <div id="dhcpSrvCont">
                <div class="inline">
                    <b class="xl" id="t_ippool">IP Address Pool:</b>
                    <input type="text" class="l" id="ip1" required />
                    <span>-</span>
                    <input type="text" class="l" id="ip2" required />
                </div>

                <div>
                    <b class="xl" id="t_leasetime">Address Lease Time:</b>
                    <input type="text" id="lease" required />
                    <div class="textbox-tips">
                        <span class="l" id="t_leaseval">minutes. (1-2880. The default value is 1440.)</span>
                    </div>
                </div>

                <div>
                    <b class="xl T_defgw">Default Gateway:</b>
                    <input type="text" id="gateway" required />
                    <span class="T_optional">(optional)</span>
                </div>

                <div class="nd">
                    <b class="xl" id="t_defdomain">Default Domain:</b>
                    <input type="text" id="domain" required />
                    <span class="T_optional">(optional)</span>
                </div>

                <div>
                    <b class="xl T_dns">DNS Server:</b>
                    <input type="text" id="dnsserver1" required />
                    <span class="T_optional">(optional)</span>
                </div>

                <div>
                    <b class="xl T_secdns">Secondary DNS Server:</b>
                    <input type="text" id="dnsserver2" required />
                    <span class="T_optional">(optional)</span>
                </div>
            </div>

            <div id="dhcpRelayCont">
                <div>
                    <b class="xl" id="t_remote">Remote Server Address:</b>
                    <input id="rmtSrv" type="text" class="text" value="0.0.0.0" size="15" maxlength="15" />
                </div>
                <p class="xl cfg-line" id="t_relay_warn">Note: You have to disable NAT of the WAN connections. Or the DHCP Relay may not take effect!</p>
            </div>
        </div>

        <div class="inline-btn-right part-separate" id="hasGroupBtn">
            <button type='submit' class="green inline T_cancel" id="cancelIPv4">Cancel</button>
            <button type="submit" class="green inline T_ok" id="saveIPv4Hg">OK</button>
        </div>

        <div id="noGroupBtn">
            <button type="submit" class="green T_save" id="saveIPv4Ng">Save</button>
        </div>
    </form>


    <form class="pure-form pure-form-aligned" id="formIPv6">
        <div id="ipv6Edit"></div>
    </form>
</div>

<script type="text/javascript">
$("#lanIPAddr").on('change', function() {
    setDhcpAddresses();
    checkParam();
});

$("#lanIPSubMaskCustomInput").on('change', function() {
    setDhcpAddresses();
    checkParam();
});

$('#secIp_en').on('click', function() {
    if ($('#secIp_en').prop('data-checked')) {
        $('#secIpCont').removeClass('nd');
    } else {
        $('#secIpCont').addClass('nd');
    }
});

$('#dhcpEn').on('click', function(e) {
    if ($('#dhcpEn').prop('data-checked')) {
        $('#dhcpCont').removeClass("nd");
    } else {
        $('#dhcpCont').addClass("nd");
    }
});

$('#dhcpServ').on('click', function() {
    $('#dhcpSrvCont').removeClass('nd');
    $('#dhcpRelayCont').addClass('nd');
});

$('#dhcpRelay').on('click', function() {
    $('#dhcpSrvCont').addClass('nd');
    $('#dhcpRelayCont').removeClass('nd');
});

$('#saveIPv4Hg').on('click', function(e) {
    $.addLoading($(this));
    clickIPv4Save();
});

$('#saveIPv4Ng').on('click', function(e) {
    $.addLoading($(this));
    clickIPv4Save();
});

$('#cancelIPv4').on('click', function(e) {
    $.reload();
});

$('#ipVer4').on('click', function(e) {
    $("#formIPv4").removeClass("nd");
    $("#formIPv6").addClass("nd");
});

$('#ipVer6').on('click', function(e) {
    $("#formIPv4").addClass("nd");
    $("#formIPv6").removeClass("nd");
});

$.tpInit(initDhcpEdit);

$("select#lanIPSubMask").click(function() {

    var subMask = $("select#lanIPSubMask").data('text');

    if (subMask == n_str.dhcp.t_custom) {
        $("#lanIPSubMaskCustom").css('display', 'inline-block');
    } else {
        $("#lanIPSubMaskCustom").css('display', 'none');
        $("#lanIPSubMaskCustomInput").val("");
        setDhcpAddresses();
        $("#gateway").val(dhcpCfg.IPRouters);
        checkParam();
    }

});
</script>
