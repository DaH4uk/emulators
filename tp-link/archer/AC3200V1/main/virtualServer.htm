<<<<<<< HEAD
<script type="text/javascript">
var selAll;
var curIndex = -1;
var addIndex = -1;
var allStk;
var allStkType;
var vtlServ_stack;
var vtlServ = [];
var vtlServ_stackIndex;
var param;
var editFlag = 0;
var curStk = [];
var curType = " ";

var serviceArray = new Array(
    ["DNS", 53, 53], ["FTP", 21, 21], ["GOPHER", 70, 70], ["HTTP", 80, 80], ["NNTP", 119, 119], ["POP3", 110, 110], ["SMTP", 25, 25], ["SOCK", 1080, 1080], ["TELNET", 23, 23]
);
$("#view").click(function() {
    if ($("#mask").length == 0) {
        $("body").append("<div id=\"mask\" class=\"mask\"></div>");
    }

    $("#accessDevList").fadeIn(200, function() {
        $("#accessDevList").removeClass("nd").addClass("on-mask msg-container");
        $.setFixedCentral($("#accessDevList"));
    });

    $("#mask").show();
});
$("#closeDeviceList").click(function() {
    $("#accessDevList").fadeOut(200, function() {
        $("#accessDevList").removeClass("on-mask msg-container").addClass("nd");
    });

    $("#mask").hide();

});

function initIntf() {
    var wanInf;
    var aliasName = $.act(ACT_GET, L3_FORWARDING, null, null, ["__ifAliasName"]);
    if (INCLUDE_WAN_MODE) {
        var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
    }
    if (INCLUDE_USB_3G_DONGLE) {
        var wan3glnkcfgList = $.act(ACT_GL, WAN_USB_3G_LINK_CFG, null, null, ["enable", "backupEnable"]);
    }

    if (INCLUDE_IPV6) {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType", "X_TP_IPv4Enabled"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "X_TP_IPv4Enabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    } else {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    }
    if (!$.exe()) {
        wanInfName = aliasName.__ifAliasName;

        var mode;
        if (INCLUDE_WAN_MODE) {
            mode = sysMode.mode;
        }
        var usb3gBackup = 0;
        if (INCLUDE_USB_3G_DONGLE) {
            $.each(wan3glnkcfgList, function() {
                if (this.enable == 1) {
                    usb3gBackup = this.backupEnable;
                    return false;
                }
            });
        }

        var index = 0;
        var flag = 0;
        for (var i = 0; i < wanIPList.length; i++) {
            if ((wanIPList[i].NATEnabled == 1) && (wanIPList[i].connectionType == "IP_Routed") && (wanIPList[i].enable == 1) && (!INCLUDE_IPV6 || wanIPList[i].X_TP_IPv4Enabled == 1)) {

                var optText = wanIPList[i].name;
                var optVal = "ip:" + wanIPList[i].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        for (var j = 0; j < wanPPPList.length; j++) {
            if ((wanPPPList[j].NATEnabled == 1) && ((wanPPPList[j].enable == 1) || (wanPPPList[j].transportType == "PPP3G" && (mode == "USB_3G" || usb3gBackup == 1))) && (!INCLUDE_IPV6 || wanPPPList[j].X_TP_IPv4Enabled == 1)) {
                var optText = wanPPPList[j].name;
                var optVal = "ppp:" + wanPPPList[j].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        if (INCLUDE_L2TP) {
            for (var j = 0; j < wanL2TPList.length; j++) {
                if (wanL2TPList[j].enable == 1) {
                    var optText = wanL2TPList[j].name;
                    var optVal = "l2tp:" + wanL2TPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }
        if (INCLUDE_PPTP) {
            for (var j = 0; j < wanPPTPList.length; j++) {
                if (wanPPTPList[j].enable == 1) {
                    var optText = wanPPTPList[j].name;
                    var optVal = "pptp:" + wanPPTPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }

        if (flag == 0) {
            var optText = s_str.nointf;
            var optVal = "";
            $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
            $("#ok").prop("disabled", true);
        }
        $("#wanInf").find("option[text=" + wanInfName + "]").prop("selected", "selected");
        var options = {
            refresh: 1
        };
        $("#wanInf").tpSelect(options);
    }
}

function doEdit(type, stack) {
    editFlag = 1;
    curType = type;
    curStk = stack;

    var wanInf;
    var aliasName = $.act(ACT_GET, L3_FORWARDING, null, null, ["__ifAliasName"]);
    if (INCLUDE_WAN_MODE) {
        var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
    }
    if (INCLUDE_USB_3G_DONGLE) {
        var wan3glnkcfgList = $.act(ACT_GL, WAN_USB_3G_LINK_CFG, null, null, ["enable", "backupEnable"]);
    }

    if (INCLUDE_IPV6) {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType", "X_TP_IPv4Enabled"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "X_TP_IPv4Enabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    } else {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    }

    if (!$.exe()) {
        pStk = stack[0] + "," + stack[1] + "," + stack[2] + ",0,0,0";
        if (type == "ip") {
            vtlServCfg = $.act(ACT_GET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "X_TP_ExternalPortEnd",
                "portMappingProtocol", "internalPort", "X_TP_InternalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_IP_CONN, pStk, null, ["name"]);
        } else if (type == "ppp") {
            vtlServCfg = $.act(ACT_GET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "X_TP_ExternalPortEnd",
                "portMappingProtocol", "internalPort", "X_TP_InternalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_PPP_CONN, pStk, null, ["name"]);
        } else if (type == "l2tp") {
            pStk = stack[0] + "," + stack[1] + ",0,0,0,0";
            vtlServCfg = $.act(ACT_GET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "externalPortEnd",
                "portMappingProtocol", "internalPort", "internalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_L2TP_CONN, pStk, null, ["name"]);
        } else if (type == "pptp") {
            pStk = stack[0] + "," + stack[1] + ",0,0,0,0";
            vtlServCfg = $.act(ACT_GET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "externalPortEnd",
                "portMappingProtocol", "internalPort", "internalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_PPTP_CONN, pStk, null, ["name"]);
        }
        if (!$.exe()) {
            wanInfName = wanInf.name;
            if (type == "l2tp" || type == "pptp") {
                if (vtlServCfg.externalPort == vtlServCfg.externalPortEnd) {
                    $("#applyPort").prop('value', vtlServCfg.externalPort);
                } else {
                    var port = vtlServCfg.externalPort + "-" + vtlServCfg.externalPortEnd;
                    $("#applyPort").prop('value', port);
                }

                $("#ipAddr").prop('value', vtlServCfg.internalClient);

                /*delete in ac3200*/
				//alert("interPort: "+vtlServCfg.internalPort+" interPortEnd: "+vtlServCfg.internalPortEnd+" "+vtlServCfg.X_TP_InternalPortEnd);
				//alert("exterPort: "+vtlServCfg.externalPort+" exterPortEnd: "+vtlServCfg.externalPortEnd+" "+vtlServCfg.X_TP_ExternalPortEnd);
if (vtlServCfg.internalPort == vtlServCfg.externalPort &&
                    vtlServCfg.internalPortEnd == vtlServCfg.externalPortEnd &&
                    vtlServCfg.internalPort != vtlServCfg.internalPortEnd) {
                    $("#interPort").prop('value', "");
                } else {
                    if (vtlServCfg.internalPort == vtlServCfg.internalPortEnd) {
                        $("#interPort").prop('value', vtlServCfg.internalPort);
                    } else {
                        var port = vtlServCfg.internalPort + "-" + vtlServCfg.internalPortEnd;
                        $("#interPort").prop('value', port);
                    }
                }
            } else {
                if (vtlServCfg.externalPort == vtlServCfg.X_TP_ExternalPortEnd) {
                    $("#applyPort").prop('value', vtlServCfg.externalPort);
                } else {
                    var port = vtlServCfg.externalPort + "-" + vtlServCfg.X_TP_ExternalPortEnd;
                    $("#applyPort").prop('value', port);
                }
                $("#ipAddr").prop('value', vtlServCfg.internalClient);

                /*delete in ac3200*/
				//alert("interPort: "+vtlServCfg.internalPort+" interPortEnd: "+vtlServCfg.internalPortEnd+" "+vtlServCfg.X_TP_InternalPortEnd);
				//alert("exterPort: "+vtlServCfg.externalPort+" exterPortEnd: "+vtlServCfg.externalPortEnd+" "+vtlServCfg.X_TP_ExternalPortEnd);
if (vtlServCfg.internalPort == vtlServCfg.externalPort &&
                    vtlServCfg.X_TP_InternalPortEnd == vtlServCfg.X_TP_ExternalPortEnd &&
                    vtlServCfg.internalPort != vtlServCfg.X_TP_InternalPortEnd) {
                    $("#interPort").prop('value', "");
                } else {
                    if (vtlServCfg.internalPort == vtlServCfg.X_TP_InternalPortEnd) {
                        $("#interPort").prop('value', vtlServCfg.internalPort);
                    } else {
                        var port = vtlServCfg.internalPort + "-" + vtlServCfg.X_TP_InternalPortEnd;
                        $("#interPort").prop('value', port);
                    }
                }
            }

            $("#serName").prop('value', vtlServCfg.serviceName);

            if (vtlServCfg.portMappingProtocol == "TCP") {
                $("#protol option[value='TCP']").prop("selected", "selected");
            } else if (vtlServCfg.portMappingProtocol == "UDP") {
                $("#protol option[value='UDP']").prop("selected", "selected");
            } else if (vtlServCfg.portMappingProtocol == "TCP or UDP") {
                $("#protol option[value='TCP or UDP']").prop("selected", "selected");
            }
            var options = {
                refresh: 1
            };
            $("#protol").tpSelect(options);

            if (vtlServCfg.portMappingEnabled == 1) {
                $("#vtlServ_en").prop('checked', 'checked');
            } else {
                $("#vtlServ_en").prop('checked', false);
            }
            $("#vtlServ_en").tpCheckbox();
        }

        var mode;
        if (INCLUDE_WAN_MODE) {
            mode = sysMode.mode;
        }
        var usb3gBackup = 0;
        if (INCLUDE_USB_3G_DONGLE) {
            $.each(wan3glnkcfgList, function() {
                if (this.enable == 1) {
                    usb3gBackup = this.backupEnable;
                    return false;
                }
            });
        }

        var index = 0;
        var flag = 0;
        for (var i = 0; i < wanIPList.length; i++) {
            if ((wanIPList[i].NATEnabled == 1) && (wanIPList[i].connectionType == "IP_Routed") && (wanIPList[i].enable == 1) && (!INCLUDE_IPV6 || wanIPList[i].X_TP_IPv4Enabled == 1)) {
                var optText = wanIPList[i].name;
                var optVal = "ip:" + wanIPList[i].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        for (var j = 0; j < wanPPPList.length; j++) {
            if ((wanPPPList[j].NATEnabled == 1) && ((wanPPPList[j].enable == 1) || (wanPPPList[j].transportType == "PPP3G" && (mode == "USB_3G" || usb3gBackup == 1))) && (!INCLUDE_IPV6 || wanPPPList[j].X_TP_IPv4Enabled == 1)) {

                var optText = wanPPPList[j].name;
                var optVal = "ppp:" + wanPPPList[j].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        if (INCLUDE_L2TP) {
            for (var j = 0; j < wanL2TPList.length; j++) {
                if (wanL2TPList[j].enable == 1) {
                    var optText = wanL2TPList[j].name;
                    var optVal = "l2tp:" + wanL2TPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }
        if (INCLUDE_PPTP) {
            for (var j = 0; j < wanPPTPList.length; j++) {
                if (wanPPTPList[j].enable == 1) {
                    var optText = wanPPTPList[j].name;
                    var optVal = "pptp:" + wanPPTPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }
        if (flag == 0) {
            var optText = s_str.nointf;
            var optVal = "";
            $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
            $("#ok").prop("disabled", true);
        }
        $("#wanInf").find("option[text=" + wanInfName + "]").prop("selected", "selected");
        var options = {
            refresh: 1
        };
        $("#wanInf").tpSelect(options);
    }
}

function doEnable(type, stack, index) {
    var isConflict = false;
    if (type == "ip") {
            var vsEntry = $.act(ACT_GET, WAN_IP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.X_TP_ExternalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    } else if (type == "ppp") {
            var vsEntry = $.act(ACT_GET, WAN_PPP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.X_TP_ExternalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    } else if (type == "l2tp") {
            var vsEntry = $.act(ACT_GET, WAN_L2TP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.externalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    } else if (type == "pptp") {
            var vsEntry = $.act(ACT_GET, WAN_PPTP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.externalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    }

    if (isConflict) {
        $.confirm(c_str.forwarding_ftp_conflict, function() {
            $.act(ACT_SET, FTP_SERVER, null, null, ["accessFromInternet=0"]);
            $.exe();
            if (type == "ip") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            } else if (type == "ppp") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            } else if (type == "l2tp") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            } else if (type == "pptp") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            }
            $.exe(function(ret) {
                if (vsEntry.portMappingEnabled == 0)
                    $('#en_' + index).removeClass('disable-icon').addClass('enable-icon');
                else
                    $('#en_' + index).addClass('disable-icon').removeClass('enable-icon');
            });
        }, function() {
            if (vsEntry.portMappingEnabled == 1)
                $('#en_' + index).removeClass('disable-icon').addClass('enable-icon');
            else
                $('#en_' + index).addClass('disable-icon').removeClass('enable-icon');
        })
    } else {
        if (type == "ip") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        } else if (type == "ppp") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        } else if (type == "l2tp") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        } else if (type == "pptp") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        }
        $.exe(function(ret) {
            if (vsEntry.portMappingEnabled == 0)
                $('#en_' + index).removeClass('disable-icon').addClass('enable-icon');
            else
                $('#en_' + index).addClass('disable-icon').removeClass('enable-icon');
        });
    }


}

function doDel(type, stack) {
    if (type == "ip") {
        $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, stack, null);
    } else if (type == "ppp") {
        $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, stack, null);
    } else if (type == "l2tp") {
        $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, stack, null);
    } else if (type == "pptp") {
        $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, stack, null);
    }

    $.exe(function(ret) {
        if (!ret) $.loadMain("virtualServer.htm");
    });
}
$("#cancel").click(function() {
    editFlag = 0;
    curType = " ";
    for (var i = 0; i < curStk.length; i++) {
        curStk[i] = -1;
    }
    $.loadMain("virtualServer.htm");
});
$("#add").click(function() {
    initIntf();
    editFlag = 2;
});
$("#delAll").click(function() {
    vtlServ_stack = [];
    vtlServ_stackType = [];
    vtlServ_stackIndex = index;
    for (var j = 0; j < vtlServ_stackIndex; j++) {
        vtlServ_stack[j] = allStk[j];
        vtlServ_stackType[j] = allStkType[j];
    }

    for (var i = 0; i < vtlServ_stackIndex; i++) {
        if ($("#" + (i + 1)).prop('data-checked')) {
            if (vtlServ_stackType[i] == "ip") {
                $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            } else if (vtlServ_stackType[i] == "ppp") {
                $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            } else if (vtlServ_stackType[i] == "l2tp") {
                $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            } else if (vtlServ_stackType[i] == "pptp") {
                $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            }
        }
    }
    if (vtlServ_stackIndex > 0) {
        $.exe(function(ret) {
            if (!ret) $.loadMain("virtualServer.htm");
        });
    }
});

$("#ok").click(function() {
    var tmpWanInfType = ($("#wanInf").data('value')).split(":")[0];
    var tmpWanInfStk = ($("#wanInf").data('value')).split(":")[1];
    var isConflict = false;

	var sevName = $("#serName").prop('value');
	if ($.asc(sevName)) {
        $.alert(ERR_VIRTUAL_SEV_NAME_NOT_ASCII);
        var element = $("#serName");
        if (element) {
            element.focus();
            element.select();
        }
		return false;
    }

    if ($.ifip($("#ipAddr").prop('value'), true)) {
        $.alert(ERR_IP_FORMAT);
        var element = $("#ipAddr");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    var vsAttrs = {};
    vsAttrs.internalClient = $.ip2ip($("#ipAddr").prop('value'));
    vsAttrs.portMappingProtocol = $("#protol").data('value');
    vsAttrs.serviceName = $("#serName").prop('value');
    vsAttrs.portMappingEnabled = ($("#vtlServ_en").prop("data-checked")) ? 1 : 0;
    if (($("#applyPort").prop('value') == "") || (!isPort($("#applyPort").prop('value'), "applyPort"))) {
        $.alert(ERR_VS_PORT_INVAD);
        var element = $("#applyPort");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
	/*check port between 1-65535*/
	if (checkPortValid($("#applyPort")) == false)
	{
		return false;
	}
	/*end*/
    var tmpApplyPort = $("#applyPort").prop('value');
    if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
        if (tmpApplyPort.split("-").length == 1) {
            vsAttrs.externalPort = parseInt(tmpApplyPort, 10);
            vsAttrs.externalPortEnd = parseInt(tmpApplyPort, 10);
        } else {
            if (tmpApplyPort.split("-")[0] > tmpApplyPort.split("-")[1]) {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[1], 10);
                vsAttrs.externalPortEnd = parseInt(tmpApplyPort.split("-")[0], 10);
            } else {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[0], 10);
                vsAttrs.externalPortEnd = parseInt(tmpApplyPort.split("-")[1], 10);
            }
        }
        if (INCLUDE_USB_FTP_SERVER && vsAttrs.portMappingProtocol != "UDP") {
            if (checkConflictFtpDataPort(vsAttrs.externalPort, vsAttrs.externalPortEnd)) {
                var element = $("#applyPort");
                if (element) {
                    element.focus();
                    element.select();
                }
                return false;
            }
            if (vsAttrs.portMappingEnabled && checkConflictFtpPort(vsAttrs.externalPort, vsAttrs.externalPortEnd)) {
                isConflict = true;
            }
        }
    } else {
        if (tmpApplyPort.split("-").length == 1) {
            vsAttrs.externalPort = parseInt(tmpApplyPort, 10);
            vsAttrs.X_TP_ExternalPortEnd = parseInt(tmpApplyPort, 10);
        } else {
            if (tmpApplyPort.split("-")[0] > tmpApplyPort.split("-")[1]) {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[1], 10);
                vsAttrs.X_TP_ExternalPortEnd = parseInt(tmpApplyPort.split("-")[0], 10);
            } else {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[0], 10);
                vsAttrs.X_TP_ExternalPortEnd = parseInt(tmpApplyPort.split("-")[1], 10);
            }
        }
        if (INCLUDE_USB_FTP_SERVER && vsAttrs.portMappingProtocol != "UDP") {
            if (checkConflictFtpDataPort(vsAttrs.externalPort, vsAttrs.X_TP_ExternalPortEnd)) {
                var element = $("#applyPort");
                if (element) {
                    element.focus();
                    element.select();
                }
                return false;
            }
            if (vsAttrs.portMappingEnabled && checkConflictFtpPort(vsAttrs.externalPort, vsAttrs.X_TP_ExternalPortEnd)) {
                isConflict = true;
            }
        }
    }

    if ((!isPort($("#interPort").prop('value'), "interPort"))) {
        $.alert(ERR_VS_INTER_PORT_INVAD);
        var element = $("#interPort");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

	/*check port between 1-65535*/
	if (checkPortValid($("#interPort")) == false)
	{
		return false;
	}
	/*end*/

    if (isConflict) {
        $.confirm(c_str.forwarding_ftp_conflict, function() {

            $.act(ACT_SET, FTP_SERVER, null, null, ["accessFromInternet=0"]);
            $.exe();

            if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
                if ($("#interPort").prop('value') != "")
                    vsAttrs.internalPort = vsAttrs.internalPortEnd = $("#interPort").prop('value');
                else {
                    vsAttrs.internalPort = vsAttrs.externalPort;
                    vsAttrs.internalPortEnd = vsAttrs.externalPortEnd;
                }
            } else {
                if ($("#interPort").prop('value') != "")
                    vsAttrs.internalPort = vsAttrs.X_TP_InternalPortEnd = $("#interPort").prop('value');
                else {
                    vsAttrs.internalPort = vsAttrs.externalPort;
                    vsAttrs.X_TP_InternalPortEnd = vsAttrs.X_TP_ExternalPortEnd;
                }
            }
            if (editFlag == 2) {
                if (tmpWanInfType == "ip") {
                    $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                } else if (tmpWanInfType == "ppp") {
                    $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                } else if (tmpWanInfType == "l2tp") {
                    $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                } else if (tmpWanInfType == "pptp") {
                    $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                }
                $.exe(function(ret) {
                    if (!ret) {
                        $.loadMain("virtualServer.htm");
                    }
                });
            } else if (editFlag == 1) {
                var type = curType;
                if (wanInfName == $("#wanInf").data('text')) {
                    if (type == "ip")
                        $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                    else if (type == "ppp")
                        $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                    else if (type == "l2tp")
                        $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                    else if (type == "pptp")
                        $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, curStk, null, vsAttrs);

                    $.exe(function(ret) {
                        if (!ret) $.loadMain("virtualServer.htm");
                    });
                } else {
                    if (type == "ip") {
                        $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, curStk, null);
                    } else if (type == "ppp") {
                        $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, curStk, null);
                    } else if (type == "l2tp") {
                        $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, curStk, null);
                    } else if (type == "pptp") {
                        $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, curStk, null);
                    }

                    $.exe(function(ret) {
                        if (!ret) {
                            if (tmpWanInfType == "ip") {
                                $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            } else if (tmpWanInfType == "ppp") {
                                $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            } else if (tmpWanInfType == "l2tp") {
                                $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            } else if (tmpWanInfType == "pptp") {
                                $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            }

                            $.exe(function(ret) {
                                if (!ret) {
                                    $.loadMain("virtualServer.htm");
                                } else {
                                    vsAttrs.portMappingEnabled = vtlServCfg.portMappingEnabled;
                                    vsAttrs.externalPort = vtlServCfg.externalPort;
                                    vsAttrs.internalPort = vtlServCfg.internalPort;
                                    vsAttrs.internalClient = vtlServCfg.internalClient;
                                    if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
                                        vsAttrs.externalPortEnd = vtlServCfg.externalPortEnd;
                                        vsAttrs.internalPortEnd = vtlServCfg.internalPortEnd;
                                    } else {
                                        vsAttrs.X_TP_ExternalPortEnd = vtlServCfg.X_TP_ExternalPortEnd;
                                        vsAttrs.X_TP_InternalPortEnd = vtlServCfg.X_TP_InternalPortEnd;
                                    }

                                    if (type == "ip") {
                                        $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    } else if (type == "ppp") {
                                        $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    } else if (type == "l2tp") {
                                        $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    } else if (type == "pptp") {
                                        $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    }
                                    $.exe();
                                }
                            });
                        }
                    });
                }
            }
        })
    } else {
        if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
            if ($("#interPort").prop('value') != "")
                vsAttrs.internalPort = vsAttrs.internalPortEnd = $("#interPort").prop('value');
            else {
                vsAttrs.internalPort = vsAttrs.externalPort;
                vsAttrs.internalPortEnd = vsAttrs.externalPortEnd;
            }
        } else {
            if ($("#interPort").prop('value') != "")
                vsAttrs.internalPort = vsAttrs.X_TP_InternalPortEnd = $("#interPort").prop('value');
            else {
                vsAttrs.internalPort = vsAttrs.externalPort;
                vsAttrs.X_TP_InternalPortEnd = vsAttrs.X_TP_ExternalPortEnd;
            }
        }
        if (editFlag == 2) {
            if (tmpWanInfType == "ip") {
                $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            } else if (tmpWanInfType == "ppp") {
                $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            } else if (tmpWanInfType == "l2tp") {
                $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            } else if (tmpWanInfType == "pptp") {
                $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            }
            $.exe(function(ret) {
                if (!ret) {
                    $.loadMain("virtualServer.htm");
                }
            });
        } else if (editFlag == 1) {
            var type = curType;
            if (wanInfName == $("#wanInf").data('text')) {
                if (type == "ip")
                    $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                else if (type == "ppp")
                    $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                else if (type == "l2tp")
                    $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                else if (type == "pptp")
                    $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, curStk, null, vsAttrs);

                $.exe(function(ret) {
                    if (!ret) $.loadMain("virtualServer.htm");
                });
            } else {
                if (type == "ip") {
                    $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, curStk, null);
                } else if (type == "ppp") {
                    $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, curStk, null);
                } else if (type == "l2tp") {
                    $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, curStk, null);
                } else if (type == "pptp") {
                    $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, curStk, null);
                }

                $.exe(function(ret) {
                    if (!ret) {
                        if (tmpWanInfType == "ip") {
                            $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        } else if (tmpWanInfType == "ppp") {
                            $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        } else if (tmpWanInfType == "l2tp") {
                            $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        } else if (tmpWanInfType == "pptp") {
                            $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        }

                        $.exe(function(ret) {
                            if (!ret) {
                                $.loadMain("virtualServer.htm");
                            } else {
                                vsAttrs.portMappingEnabled = vtlServCfg.portMappingEnabled;
                                vsAttrs.externalPort = vtlServCfg.externalPort;
                                vsAttrs.internalPort = vtlServCfg.internalPort;
                                vsAttrs.internalClient = vtlServCfg.internalClient;
                                if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
                                    vsAttrs.externalPortEnd = vtlServCfg.externalPortEnd;
                                    vsAttrs.internalPortEnd = vtlServCfg.internalPortEnd;
                                } else {
                                    vsAttrs.X_TP_ExternalPortEnd = vtlServCfg.X_TP_ExternalPortEnd;
                                    vsAttrs.X_TP_InternalPortEnd = vtlServCfg.X_TP_InternalPortEnd;
                                }

                                if (type == "ip") {
                                    $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                } else if (type == "ppp") {
                                    $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                } else if (type == "l2tp") {
                                    $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                } else if (type == "pptp") {
                                    $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                }
                                $.exe();
                            }
                        });
                    }
                });
            }
        }
    }

});

/*add to check port num(xx or xx-xx) between 1-65535*/
function checkPortValid(element)
{
	var valueStr = element.prop('value');
	var minValue = 65536;
	var maxValue = 0;
	var value = 0;
	if (valueStr == "")
		return true;
	//alert("splitLen: "+valueStr.split("-").length);
	if (valueStr.split("-").length == 1)
	{
		value = parseInt(valueStr.split("-")[0],10);
		minValue = value < minValue? value:minValue;
		maxValue = value > maxValue? value:maxValue;
	}
	else
	{
		value = parseInt(valueStr.split("-")[0],10);
		minValue = value < minValue? value:minValue;
		maxValue = value > maxValue? value:maxValue;
			
		value = parseInt(valueStr.split("-")[1],10);
		minValue = value < minValue? value:minValue;
		maxValue = value > maxValue? value:maxValue;
	}
	//alert("minValue: "+minValue+" maxValue: "+maxValue);
	if (minValue < 1 || maxValue >65535)
	{
		$.alert(ERR_PORT_NUM_INVAD);
        if (element) 
		{
            element.focus();
            element.select();
        }
        return false;
	}
	return true;
}
/*end add*/
function isPort(val, type) {
    var c;
    var ch;
    if (type == "applyPort") {
        ch = "0123456789-";
    } else if (type == "interPort") {
        /* if empty, internal port equal to external port */
        if (val == "")
            return true;
        ch = "0123456789";
    }

    for (var i = 0; i < val.length; i++) {
        c = val.charAt(i);
        if (ch.indexOf(c) == -1)
            return false;
    }
    if ((val.split("-").length != 1) && (val.split("-").length != 2))
        return false;
    if ((val.split("-").length == 2) && (val.split("-")[0] == ""))
        return false;
    if ((val.split("-").length == 2) && (val.split("-")[1] == ""))
        return false;

    return true;
}

function checkConflictFtpDataPort(exPort, exPortEnd) {
    var conflict = false;
    if (exPortEnd == 0) {
        if ((59990 <= exPort) && (exPort <= 59999)) {
            conflict = true;
        }
    } else if (exPort == 0) {
        if ((59990 <= exPortEnd) && (exPortEnd <= 59999)) {
            conflict = true;
        }
    } else if (!((59999 < exPort) || (exPortEnd < 59990))) {
        conflict = true;
    }
    if (conflict) {
        $.alert(ERR_FTP_DATA_PORT_CONFLICT);
        return true;
    }

    return false;
}

function checkConflictFtpPort(exPort, exPortEnd) {
    var ftpServer = $.act(ACT_GET, FTP_SERVER, null, null, null);

    if ($.exe()) {
        return;
    }

    if ((ftpServer.enable == 1) && (ftpServer.accessFromInternet == 1)) {
        if (exPort == 0) {
            if (ftpServer.portNumber == exPortEnd) {
                return true;
            }
        } else if (exPortEnd == 0) {
            if (ftpServer.portNumber == exPort) {
                return true;
            }
        } else if ((exPort <= ftpServer.portNumber) && (ftpServer.portNumber <= exPortEnd)) {
            return true;
        }
    }

        return false;
}

function initTable() {
    selAll = 0;
    index = 0;
    param = [];
    allStk = [];
    allStkType = [];
    vtlServ_param = [];
    vtlServ_stack = [];
    vtlServ_stackType = [];
    vtlServ_stackIndex = 0;

    var wanInfStk;
    var array = new Array();
    var vtlServList_IP = $.act(ACT_GL, WAN_IP_CONN_PORTMAPPING, null, null);
    var vtlServList_PPP = $.act(ACT_GL, WAN_PPP_CONN_PORTMAPPING, null, null);
    if (INCLUDE_USB_3G_DONGLE) {
        var wan3glnkcfgList = $.act(ACT_GL, WAN_USB_3G_LINK_CFG, null, null, ["enable", "backupEnable"]);
    }
    if (INCLUDE_L2TP) {
        var vtlServList_L2TP = $.act(ACT_GL, WAN_L2TP_CONN_PORTMAPPING, null, null);
    }
    if (INCLUDE_PPTP) {
        var vtlServList_PPTP = $.act(ACT_GL, WAN_PPTP_CONN_PORTMAPPING, null, null);
    }
    $.exe(function(err) {
        if (err) return;
        var usb3gBackup = 0;
        if (INCLUDE_USB_3G_DONGLE) {
            $.each(wan3glnkcfgList, function() {
                if (this.enable == 1) {
                    usb3gBackup = this.backupEnable;
                    return false;
                }
            });
        }
        $.each(vtlServList_IP, function() {
            wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + "," + (this.__stack).split(",")[2] + ",0,0,0";
            var wanInf_IP = $.act(ACT_GET, WAN_IP_CONN, wanInfStk, null, ["name"]);
            var getInf = 0;
            if (INCLUDE_WAN_MODE) {
                var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
                var wanCommIntfCfgList = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);
            }
            if (!$.exe()) {
                getInf = 1;
                if (INCLUDE_WAN_MODE) {
                    var notShow = 0;
                    var mode = (sysMode.mode == "ETH") ? "Ethernet" : sysMode.mode;
                    var tmpStk = $.stkPop(wanInfStk, 2);
                    $.each(wanCommIntfCfgList, function() {
                        if (tmpStk == this.__stack && this.WANAccessType != mode) {
                            notShow = 1;
                            return;
                        }
                    });
                    if (notShow == 1) {
                        return;
                    }
                }
            }
            index++;
            var thisStk = "[" + this.__stack + "]";
            var externalPort = 0;
            var internalPort = 0;
            var intfName;
            if ((this.externalPort != 0) && (this.X_TP_ExternalPortEnd == 0)) {
                externalPort = this.externalPort;
            } else if ((this.externalPort == 0) && (this.X_TP_ExternalPortEnd != 0)) {
                externalPort = this.X_TP_ExternalPortEnd;
            } else if (this.externalPort == this.X_TP_ExternalPortEnd) {
                externalPort = this.externalPort;
            } else {
                externalPort = this.externalPort + "-" + this.X_TP_ExternalPortEnd;
            }

            if ((this.internalPort != 0) && (this.X_TP_InternalPortEnd == 0)) {
                internalPort = this.internalPort;
            } else if ((this.internalPort == 0) && (this.X_TP_InternalPortEnd != 0)) {
                internalPort = this.X_TP_InternalPortEnd;
            } else if (this.internalPort == this.X_TP_InternalPortEnd) {
                internalPort = this.internalPort;
            } else {
                internalPort = this.internalPort + "-" + this.X_TP_InternalPortEnd;
            }

            if (getInf == 1) {
                intfName = wanInf_IP.name;
            }
            allStk[index - 1] = this.__stack;
            allStkType[index - 1] = "ip";
            if (this.portMappingEnabled == 1) {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"ip\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ip\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ip\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            } else {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"ip\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ip\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ip\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            }
        });

        $.each(vtlServList_PPP, function() {
            wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + "," + (this.__stack).split(",")[2] + ",0,0,0";
            var wanInf_PPP = $.act(ACT_GET, WAN_PPP_CONN, wanInfStk, null, ["name"]);
            var getInf = 0;
            if (INCLUDE_WAN_MODE) {
                var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
                var wanCommIntfCfgList = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);
            }
            if (!$.exe()) {
                getInf = 1;
                var notShow = 0;
                if (INCLUDE_WAN_MODE) {
                    var mode = (sysMode.mode == "ETH") ? "Ethernet" : sysMode.mode;
                    var tmpStk = $.stkPop(wanInfStk, 2);
                    $.each(wanCommIntfCfgList, function() {
                        /* USB_3G is special, because it can be used as backup when DSL and ETH sysmode. So far, we
                        only need to deal with ppp connection, because 3G is connected as a ppp. */
                        if (tmpStk == this.__stack && this.WANAccessType != mode && (this.WANAccessType != "USB_3G" || usb3gBackup != 1)) {
                            notShow = 1;
                            return;
                        }
                    });
                } /*else {
                    $.each(wanCommIntfCfgList, function() {
                        if (tmpStk == this.__stack && this.WANAccessType == "USB_3G" && usb3gBackup != 1) {
                            notShow = 1;
                            return;
                        }
                    });
                }*/
                if (notShow == 1) {
                    return;
                }
            }

            index++;
            var thisStk = "[" + this.__stack + "]";
            var externalPort = 0;
            var internalPort = 0;
            var intfName;
            if ((this.externalPort != 0) && (this.X_TP_ExternalPortEnd == 0)) {
                externalPort = this.externalPort;
            } else if ((this.externalPort == 0) && (this.X_TP_ExternalPortEnd != 0)) {
                externalPort = this.X_TP_ExternalPortEnd;
            } else if (this.externalPort == this.X_TP_ExternalPortEnd) {
                externalPort = this.externalPort;
            } else {
                externalPort = this.externalPort + "-" + this.X_TP_ExternalPortEnd;
            }

            if ((this.internalPort != 0) && (this.X_TP_InternalPortEnd == 0)) {
                internalPort = this.internalPort;
            } else if ((this.internalPort == 0) && (this.X_TP_InternalPortEnd != 0)) {
                internalPort = this.X_TP_InternalPortEnd;
            } else if (this.internalPort == this.X_TP_InternalPortEnd) {
                internalPort = this.internalPort;
            } else {
                internalPort = this.internalPort + "-" + this.X_TP_InternalPortEnd;
            }

            if (getInf == 1) {
                intfName = wanInf_PPP.name;
            }
            allStk[index - 1] = this.__stack;
            allStkType[index - 1] = "ppp";

            if (this.portMappingEnabled == 1) {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"ppp\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ppp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ppp\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            } else {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"ppp\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ppp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ppp\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            }
        });

        if (INCLUDE_L2TP) {
            $.each(vtlServList_L2TP, function() {
                wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + ",0,0,0,0";
                var wanInf_L2TP = $.act(ACT_GET, WAN_L2TP_CONN, wanInfStk, null, ["name"]);
                var getInf = 0;
                if (!$.exe()) {
                    getInf = 1;
                }

                var thisStk = "[" + this.__stack + "]";
                index++;
                var externalPort = 0;
                var internalPort = 0;
                var intfName;
                if ((this.externalPort != 0) && (this.externalPortEnd == 0)) {
                    externalPort = this.externalPort;
                } else if ((this.externalPort == 0) && (this.externalPortEnd != 0)) {
                    externalPort = this.externalPortEnd;
                } else if (this.externalPort == this.externalPortEnd) {
                    externalPort = this.externalPort;
                } else {
                    externalPort = this.externalPort + "-" + this.externalPortEnd;
                }

                if ((this.internalPort != 0) && (this.internalPortEnd == 0)) {
                    internalPort = this.internalPort;
                } else if ((this.internalPort == 0) && (this.internalPortEnd != 0)) {
                    internalPort = this.internalPortEnd;
                } else if (this.internalPort == this.internalPortEnd) {
                    internalPort = this.internalPort;
                } else {
                    internalPort = this.internalPort + "-" + this.internalPortEnd;
                }

                if (getInf == 1) {
                    intfName = wanInf_L2TP.name;
                }
                allStk[index - 1] = this.__stack;
                allStkType[index - 1] = "l2tp";

                if (this.portMappingEnabled == 1) {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"l2tp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"l2tp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"l2tp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                } else {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"l2tp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"l2tp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"l2tp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                }
            });
        }

        if (INCLUDE_PPTP) {
            $.each(vtlServList_PPTP, function() {

                wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + ",0,0,0,0";
                var wanInf_PPTP = $.act(ACT_GET, WAN_PPTP_CONN, wanInfStk, null, ["name"]);
                var getInf = 0;
                if (!$.exe()) {
                    getInf = 1;
                }

                var thisStk = "[" + this.__stack + "]";
                index++;
                var externalPort = 0;
                var internalPort = 0;
                var intfName;
                if ((this.externalPort != 0) && (this.externalPortEnd == 0)) {
                    externalPort = this.externalPort;
                } else if ((this.externalPort == 0) && (this.externalPortEnd != 0)) {
                    externalPort = this.externalPortEnd;
                } else if (this.externalPort == this.externalPortEnd) {
                    externalPort = this.externalPort;
                } else {
                    externalPort = this.externalPort + "-" + this.externalPortEnd;
                }

                if ((this.internalPort != 0) && (this.internalPortEnd == 0)) {
                    internalPort = this.internalPort;
                } else if ((this.internalPort == 0) && (this.internalPortEnd != 0)) {
                    internalPort = this.internalPortEnd;
                } else if (this.internalPort == this.internalPortEnd) {
                    internalPort = this.internalPort;
                } else {
                    internalPort = this.internalPort + "-" + this.internalPortEnd;
                }

                if (getInf == 1) {
                    intfName = wanInf_PPTP.name;
                }

                if (this.portMappingEnabled == 1) {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"pptp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"pptp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"pptp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                } else {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"pptp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"pptp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"pptp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                }

                allStk[index - 1] = this.__stack;
                allStkType[index - 1] = "pptp";
            });
        }

        $.initTableBody($("#table-virtual"), array);
        return array;
    });
}

function initServiceTable() {
    var array = new Array();
    for (var i = 0; i < serviceArray.length; i++) {
        var id = i + 1;
        array.push([{
            "text": id,
            "width": "30%"
        }, {
            "text": serviceArray[i][0],
            "width": "40%"
        }, {
            "text": "<span class='choose' >" + s_str.choose + "</span>",
            "width": "30%"
        }]);
    }
    $.initTableBody($("#table-service"), array);
    $('span.choose').click(function() {
        var serType = $(this).parents("tr").find("td:eq(1)").text();
        var serId = $(this).parents("tr").find("td:eq(0)").text();
        if (serId > 0) {
            if (serType == serviceArray[serId - 1][0]) {
                $("#serName").prop('value', serviceArray[serId - 1][0]);
                $("#applyPort").prop('value', serviceArray[serId - 1][1]);
                $("#interPort").prop('value', serviceArray[serId - 1][2]);
                $("#accessDevList").fadeOut(200, function() {
                    $("#accessDevList").removeClass("on-mask msg-container").addClass("nd");
                });
                $("#mask").hide();
            }
        }
    });
}

function selectAll() {
    var i;
    for (i = 0; i < allStk.length; i++) {
        if ($('#checkbox_st').prop('data-checked'))
            $("#" + (i + 1)).prop('checked', true);
        else
            $("#" + (i + 1)).prop('checked', false);
    }
    $('#checkbox_st').prop('checked', $('#checkbox_st').prop('data-checked'));

    $.each($('input.checkbox-checkbox'), function() {
        $(this).data('tpCheckbox').refresh();
    });
}
</script>

<h3 id="et">Virtual Server</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned">
        <div class="table-op" id="addItem">
            <div class="table-btn">
                <span id="add" class="add-icon"></span>
                <label class="T_add">Add</label>
                <span id="delAll" class="delete-all-icon"></span>
                <label class="T_del">Delete</label>
            </div>
        </div>
        <table id="table-virtual">
            <thead></thead>
            <tbody id="body-virtual">
                <tr id="edit-container-virtual" class="nd">
                    <td colspan="9">
                        <div class="nd">
                            <b class="T_intfname">Interface Name:</b>
                            <select class="xl" id="wanInf">
                            </select>
                        </div>
                        <div>
                            <b class="T_servname">Service Name:</b>
                            <input class="xl" type="text" id="serName" maxlength="15"/>
                            <button type="submit" class="blue T_viewserv xxl" id="view">View Service</button>
                        </div>
                        <div>
                            <b class="T_exterport">External Port:</b>
                            <input class="xl" type="text" id="applyPort" />
                            <span id="t_iprange">(XX-XX or XX)</span>
                        </div>
                        <div>
                            <b class="T_interip">Internal IP:</b>
                            <input class="xl" type="text" id="ipAddr" />
                        </div>
                        <div>
                            <b class="T_interport">Internal Port:</b>
                            <input class="xl" type="text" id="interPort" />
                            <div style="display: inline-block;width: 180px;vertical-align: middle;line-height: 14px;"><span id="t_port">(XX)</span></div>
                        </div>

                        <b class="T_proto">Protocol:</b>
                        <select class="xl" id="protol">
                            <option value="TCP" id="TCP">TCP</option>
                            <option value="UDP" id="UDP">UDP</option>
                            <option value="TCP or UDP" class="T_all" id="ALL">ALL</option>
                        </select>

                        <div>
                            <b></b>
                            <input class="xl" type="checkbox" id="vtlServ_en" checked />
                            <label class="T_enthisentry">Enable this Entry</label>
                        </div>
                        <div class="inline-btn-right">
                            <button type="submit" class="green T_cancel" id="cancel">Cancel</button>
                            <button type="submit" class="green T_ok" id="ok">OK</button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </form>
</div>
<div>
    <form class="pure-form pure-form-aligned">
        <div id="accessDevList" class="nd">
            <div id="closeDeviceList" class="table-op">
                <div class="table-btn">
                    <span class="close-icon table-icon"></span>
                    <label class="T_close">Close</label>
                </div>
            </div>

            <table id="table-service">
                <thead></thead>
                <tbody id="bodyAccessDevicesList">
                </tbody>
            </table>
        </div>
    </form>
</div>

<script type="text/javascript">
var headArray = [{
    "text": '<div><input type="checkbox" id="checkbox_st" /><label></label></div>',
    "width": "5%"
}, {
    "text": table_str.id,
    "width": "5%"
}, {
    "text": table_str.servname,
    "width": "10%"
}, {
    "text": table_str.exterport,
    "width": "20%"
}, {
    "text": table_str.interip,
    "width": "20%"
}, {
    "text": table_str.interport,
    "width": "10%"
}, {
    "text": table_str.protocol,
    "width": "10%"
}, {
    "text": table_str.status,
    "width": "10%"
}, {
    "text": table_str.modify,
    "width": "15%"
}];
var AccessDevicesListHeadArray = [{
    "text": table_str.id,
    "width": "15%"
}, {
    "text": table_str.servname,
    "width": "40%"
}, {
    "text": table_str.operation,
    "width": "45%"
}];

$.initTableHead($("#table-virtual"), headArray);
$("#table-virtual").tpTable(initTable);

$.initTableHead($("#table-service"), AccessDevicesListHeadArray);
$("#table-service").tpTable(initServiceTable);

$("#checkbox_st").on('click', function(e) {
    selectAll();
});
$.tpInit();
</script>
=======
<script type="text/javascript">
var selAll;
var curIndex = -1;
var addIndex = -1;
var allStk;
var allStkType;
var vtlServ_stack;
var vtlServ = [];
var vtlServ_stackIndex;
var param;
var editFlag = 0;
var curStk = [];
var curType = " ";

var serviceArray = new Array(
    ["DNS", 53, 53], ["FTP", 21, 21], ["GOPHER", 70, 70], ["HTTP", 80, 80], ["NNTP", 119, 119], ["POP3", 110, 110], ["SMTP", 25, 25], ["SOCK", 1080, 1080], ["TELNET", 23, 23]
);
$("#view").click(function() {
    if ($("#mask").length == 0) {
        $("body").append("<div id=\"mask\" class=\"mask\"></div>");
    }

    $("#accessDevList").fadeIn(200, function() {
        $("#accessDevList").removeClass("nd").addClass("on-mask msg-container");
        $.setFixedCentral($("#accessDevList"));
    });

    $("#mask").show();
});
$("#closeDeviceList").click(function() {
    $("#accessDevList").fadeOut(200, function() {
        $("#accessDevList").removeClass("on-mask msg-container").addClass("nd");
    });

    $("#mask").hide();

});

function initIntf() {
    var wanInf;
    var aliasName = $.act(ACT_GET, L3_FORWARDING, null, null, ["__ifAliasName"]);
    if (INCLUDE_WAN_MODE) {
        var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
    }
    if (INCLUDE_USB_3G_DONGLE) {
        var wan3glnkcfgList = $.act(ACT_GL, WAN_USB_3G_LINK_CFG, null, null, ["enable", "backupEnable"]);
    }

    if (INCLUDE_IPV6) {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType", "X_TP_IPv4Enabled"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "X_TP_IPv4Enabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    } else {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    }
    if (!$.exe()) {
        wanInfName = aliasName.__ifAliasName;

        var mode;
        if (INCLUDE_WAN_MODE) {
            mode = sysMode.mode;
        }
        var usb3gBackup = 0;
        if (INCLUDE_USB_3G_DONGLE) {
            $.each(wan3glnkcfgList, function() {
                if (this.enable == 1) {
                    usb3gBackup = this.backupEnable;
                    return false;
                }
            });
        }

        var index = 0;
        var flag = 0;
        for (var i = 0; i < wanIPList.length; i++) {
            if ((wanIPList[i].NATEnabled == 1) && (wanIPList[i].connectionType == "IP_Routed") && (wanIPList[i].enable == 1) && (!INCLUDE_IPV6 || wanIPList[i].X_TP_IPv4Enabled == 1)) {

                var optText = wanIPList[i].name;
                var optVal = "ip:" + wanIPList[i].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        for (var j = 0; j < wanPPPList.length; j++) {
            if ((wanPPPList[j].NATEnabled == 1) && ((wanPPPList[j].enable == 1) || (wanPPPList[j].transportType == "PPP3G" && (mode == "USB_3G" || usb3gBackup == 1))) && (!INCLUDE_IPV6 || wanPPPList[j].X_TP_IPv4Enabled == 1)) {
                var optText = wanPPPList[j].name;
                var optVal = "ppp:" + wanPPPList[j].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        if (INCLUDE_L2TP) {
            for (var j = 0; j < wanL2TPList.length; j++) {
                if (wanL2TPList[j].enable == 1) {
                    var optText = wanL2TPList[j].name;
                    var optVal = "l2tp:" + wanL2TPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }
        if (INCLUDE_PPTP) {
            for (var j = 0; j < wanPPTPList.length; j++) {
                if (wanPPTPList[j].enable == 1) {
                    var optText = wanPPTPList[j].name;
                    var optVal = "pptp:" + wanPPTPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }

        if (flag == 0) {
            var optText = s_str.nointf;
            var optVal = "";
            $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
            $("#ok").prop("disabled", true);
        }
        $("#wanInf").find("option[text=" + wanInfName + "]").prop("selected", "selected");
        var options = {
            refresh: 1
        };
        $("#wanInf").tpSelect(options);
    }
}

function doEdit(type, stack) {
    editFlag = 1;
    curType = type;
    curStk = stack;

    var wanInf;
    var aliasName = $.act(ACT_GET, L3_FORWARDING, null, null, ["__ifAliasName"]);
    if (INCLUDE_WAN_MODE) {
        var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
    }
    if (INCLUDE_USB_3G_DONGLE) {
        var wan3glnkcfgList = $.act(ACT_GL, WAN_USB_3G_LINK_CFG, null, null, ["enable", "backupEnable"]);
    }

    if (INCLUDE_IPV6) {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType", "X_TP_IPv4Enabled"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "X_TP_IPv4Enabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    } else {
        var wanIPList = $.act(ACT_GL, WAN_IP_CONN, null, null, ["enable", "name", "NATEnabled", "connectionType"]);
        var wanPPPList = $.act(ACT_GL, WAN_PPP_CONN, null, null, ["enable", "name", "NATEnabled", "transportType"]);
        if (INCLUDE_L2TP) {
            var wanL2TPList = $.act(ACT_GL, WAN_L2TP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
        if (INCLUDE_PPTP) {
            var wanPPTPList = $.act(ACT_GL, WAN_PPTP_CONN, null, null, ["enable", "name", "NATEnabled"]);
        }
    }

    if (!$.exe()) {
        pStk = stack[0] + "," + stack[1] + "," + stack[2] + ",0,0,0";
        if (type == "ip") {
            vtlServCfg = $.act(ACT_GET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "X_TP_ExternalPortEnd",
                "portMappingProtocol", "internalPort", "X_TP_InternalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_IP_CONN, pStk, null, ["name"]);
        } else if (type == "ppp") {
            vtlServCfg = $.act(ACT_GET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "X_TP_ExternalPortEnd",
                "portMappingProtocol", "internalPort", "X_TP_InternalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_PPP_CONN, pStk, null, ["name"]);
        } else if (type == "l2tp") {
            pStk = stack[0] + "," + stack[1] + ",0,0,0,0";
            vtlServCfg = $.act(ACT_GET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "externalPortEnd",
                "portMappingProtocol", "internalPort", "internalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_L2TP_CONN, pStk, null, ["name"]);
        } else if (type == "pptp") {
            pStk = stack[0] + "," + stack[1] + ",0,0,0,0";
            vtlServCfg = $.act(ACT_GET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled", "externalPort", "externalPortEnd",
                "portMappingProtocol", "internalPort", "internalPortEnd", "internalClient", "serviceName"
            ]);
            wanInf = $.act(ACT_GET, WAN_PPTP_CONN, pStk, null, ["name"]);
        }
        if (!$.exe()) {
            wanInfName = wanInf.name;
            if (type == "l2tp" || type == "pptp") {
                if (vtlServCfg.externalPort == vtlServCfg.externalPortEnd) {
                    $("#applyPort").prop('value', vtlServCfg.externalPort);
                } else {
                    var port = vtlServCfg.externalPort + "-" + vtlServCfg.externalPortEnd;
                    $("#applyPort").prop('value', port);
                }

                $("#ipAddr").prop('value', vtlServCfg.internalClient);

                /*delete in ac3200*/
				//alert("interPort: "+vtlServCfg.internalPort+" interPortEnd: "+vtlServCfg.internalPortEnd+" "+vtlServCfg.X_TP_InternalPortEnd);
				//alert("exterPort: "+vtlServCfg.externalPort+" exterPortEnd: "+vtlServCfg.externalPortEnd+" "+vtlServCfg.X_TP_ExternalPortEnd);
if (vtlServCfg.internalPort == vtlServCfg.externalPort &&
                    vtlServCfg.internalPortEnd == vtlServCfg.externalPortEnd &&
                    vtlServCfg.internalPort != vtlServCfg.internalPortEnd) {
                    $("#interPort").prop('value', "");
                } else {
                    if (vtlServCfg.internalPort == vtlServCfg.internalPortEnd) {
                        $("#interPort").prop('value', vtlServCfg.internalPort);
                    } else {
                        var port = vtlServCfg.internalPort + "-" + vtlServCfg.internalPortEnd;
                        $("#interPort").prop('value', port);
                    }
                }
            } else {
                if (vtlServCfg.externalPort == vtlServCfg.X_TP_ExternalPortEnd) {
                    $("#applyPort").prop('value', vtlServCfg.externalPort);
                } else {
                    var port = vtlServCfg.externalPort + "-" + vtlServCfg.X_TP_ExternalPortEnd;
                    $("#applyPort").prop('value', port);
                }
                $("#ipAddr").prop('value', vtlServCfg.internalClient);

                /*delete in ac3200*/
				//alert("interPort: "+vtlServCfg.internalPort+" interPortEnd: "+vtlServCfg.internalPortEnd+" "+vtlServCfg.X_TP_InternalPortEnd);
				//alert("exterPort: "+vtlServCfg.externalPort+" exterPortEnd: "+vtlServCfg.externalPortEnd+" "+vtlServCfg.X_TP_ExternalPortEnd);
if (vtlServCfg.internalPort == vtlServCfg.externalPort &&
                    vtlServCfg.X_TP_InternalPortEnd == vtlServCfg.X_TP_ExternalPortEnd &&
                    vtlServCfg.internalPort != vtlServCfg.X_TP_InternalPortEnd) {
                    $("#interPort").prop('value', "");
                } else {
                    if (vtlServCfg.internalPort == vtlServCfg.X_TP_InternalPortEnd) {
                        $("#interPort").prop('value', vtlServCfg.internalPort);
                    } else {
                        var port = vtlServCfg.internalPort + "-" + vtlServCfg.X_TP_InternalPortEnd;
                        $("#interPort").prop('value', port);
                    }
                }
            }

            $("#serName").prop('value', vtlServCfg.serviceName);

            if (vtlServCfg.portMappingProtocol == "TCP") {
                $("#protol option[value='TCP']").prop("selected", "selected");
            } else if (vtlServCfg.portMappingProtocol == "UDP") {
                $("#protol option[value='UDP']").prop("selected", "selected");
            } else if (vtlServCfg.portMappingProtocol == "TCP or UDP") {
                $("#protol option[value='TCP or UDP']").prop("selected", "selected");
            }
            var options = {
                refresh: 1
            };
            $("#protol").tpSelect(options);

            if (vtlServCfg.portMappingEnabled == 1) {
                $("#vtlServ_en").prop('checked', 'checked');
            } else {
                $("#vtlServ_en").prop('checked', false);
            }
            $("#vtlServ_en").tpCheckbox();
        }

        var mode;
        if (INCLUDE_WAN_MODE) {
            mode = sysMode.mode;
        }
        var usb3gBackup = 0;
        if (INCLUDE_USB_3G_DONGLE) {
            $.each(wan3glnkcfgList, function() {
                if (this.enable == 1) {
                    usb3gBackup = this.backupEnable;
                    return false;
                }
            });
        }

        var index = 0;
        var flag = 0;
        for (var i = 0; i < wanIPList.length; i++) {
            if ((wanIPList[i].NATEnabled == 1) && (wanIPList[i].connectionType == "IP_Routed") && (wanIPList[i].enable == 1) && (!INCLUDE_IPV6 || wanIPList[i].X_TP_IPv4Enabled == 1)) {
                var optText = wanIPList[i].name;
                var optVal = "ip:" + wanIPList[i].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        for (var j = 0; j < wanPPPList.length; j++) {
            if ((wanPPPList[j].NATEnabled == 1) && ((wanPPPList[j].enable == 1) || (wanPPPList[j].transportType == "PPP3G" && (mode == "USB_3G" || usb3gBackup == 1))) && (!INCLUDE_IPV6 || wanPPPList[j].X_TP_IPv4Enabled == 1)) {

                var optText = wanPPPList[j].name;
                var optVal = "ppp:" + wanPPPList[j].__stack;
                $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                flag = 1;
            }
        }
        if (INCLUDE_L2TP) {
            for (var j = 0; j < wanL2TPList.length; j++) {
                if (wanL2TPList[j].enable == 1) {
                    var optText = wanL2TPList[j].name;
                    var optVal = "l2tp:" + wanL2TPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }
        if (INCLUDE_PPTP) {
            for (var j = 0; j < wanPPTPList.length; j++) {
                if (wanPPTPList[j].enable == 1) {
                    var optText = wanPPTPList[j].name;
                    var optVal = "pptp:" + wanPPTPList[j].__stack;
                    $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
                    flag = 1;
                }
            }
        }
        if (flag == 0) {
            var optText = s_str.nointf;
            var optVal = "";
            $("#wanInf").append("<option value='" + optVal + "' text='" + optText + "' >" + optText + "</option>");
            $("#ok").prop("disabled", true);
        }
        $("#wanInf").find("option[text=" + wanInfName + "]").prop("selected", "selected");
        var options = {
            refresh: 1
        };
        $("#wanInf").tpSelect(options);
    }
}

function doEnable(type, stack, index) {
    var isConflict = false;
    if (type == "ip") {
            var vsEntry = $.act(ACT_GET, WAN_IP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.X_TP_ExternalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    } else if (type == "ppp") {
            var vsEntry = $.act(ACT_GET, WAN_PPP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.X_TP_ExternalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    } else if (type == "l2tp") {
            var vsEntry = $.act(ACT_GET, WAN_L2TP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.externalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    } else if (type == "pptp") {
            var vsEntry = $.act(ACT_GET, WAN_PPTP_CONN_PORTMAPPING, stack, null, null);
            $.exe();
        if (INCLUDE_USB_FTP_SERVER) {
            if (checkConflictFtpPort(vsEntry.externalPort, vsEntry.externalPortEnd) && vsEntry.portMappingProtocol != "UDP") {
                isConflict = true;
            }
        }
    }

    if (isConflict) {
        $.confirm(c_str.forwarding_ftp_conflict, function() {
            $.act(ACT_SET, FTP_SERVER, null, null, ["accessFromInternet=0"]);
            $.exe();
            if (type == "ip") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            } else if (type == "ppp") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            } else if (type == "l2tp") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            } else if (type == "pptp") {
                if (vsEntry.portMappingEnabled == 0) {
                    $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
                } else if (vsEntry.portMappingEnabled == 1) {
                    $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
                }
            }
            $.exe(function(ret) {
                if (vsEntry.portMappingEnabled == 0)
                    $('#en_' + index).removeClass('disable-icon').addClass('enable-icon');
                else
                    $('#en_' + index).addClass('disable-icon').removeClass('enable-icon');
            });
        }, function() {
            if (vsEntry.portMappingEnabled == 1)
                $('#en_' + index).removeClass('disable-icon').addClass('enable-icon');
            else
                $('#en_' + index).addClass('disable-icon').removeClass('enable-icon');
        })
    } else {
        if (type == "ip") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        } else if (type == "ppp") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        } else if (type == "l2tp") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        } else if (type == "pptp") {
            if (vsEntry.portMappingEnabled == 0) {
                $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=1"]);
            } else if (vsEntry.portMappingEnabled == 1) {
                $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, stack, null, ["portMappingEnabled=0"]);
            }
        }
        $.exe(function(ret) {
            if (vsEntry.portMappingEnabled == 0)
                $('#en_' + index).removeClass('disable-icon').addClass('enable-icon');
            else
                $('#en_' + index).addClass('disable-icon').removeClass('enable-icon');
        });
    }


}

function doDel(type, stack) {
    if (type == "ip") {
        $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, stack, null);
    } else if (type == "ppp") {
        $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, stack, null);
    } else if (type == "l2tp") {
        $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, stack, null);
    } else if (type == "pptp") {
        $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, stack, null);
    }

    $.exe(function(ret) {
        if (!ret) $.loadMain("virtualServer.htm");
    });
}
$("#cancel").click(function() {
    editFlag = 0;
    curType = " ";
    for (var i = 0; i < curStk.length; i++) {
        curStk[i] = -1;
    }
    $.loadMain("virtualServer.htm");
});
$("#add").click(function() {
    initIntf();
    editFlag = 2;
});
$("#delAll").click(function() {
    vtlServ_stack = [];
    vtlServ_stackType = [];
    vtlServ_stackIndex = index;
    for (var j = 0; j < vtlServ_stackIndex; j++) {
        vtlServ_stack[j] = allStk[j];
        vtlServ_stackType[j] = allStkType[j];
    }

    for (var i = 0; i < vtlServ_stackIndex; i++) {
        if ($("#" + (i + 1)).prop('data-checked')) {
            if (vtlServ_stackType[i] == "ip") {
                $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            } else if (vtlServ_stackType[i] == "ppp") {
                $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            } else if (vtlServ_stackType[i] == "l2tp") {
                $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            } else if (vtlServ_stackType[i] == "pptp") {
                $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, vtlServ_stack[i], null);
            }
        }
    }
    if (vtlServ_stackIndex > 0) {
        $.exe(function(ret) {
            if (!ret) $.loadMain("virtualServer.htm");
        });
    }
});

$("#ok").click(function() {
    var tmpWanInfType = ($("#wanInf").data('value')).split(":")[0];
    var tmpWanInfStk = ($("#wanInf").data('value')).split(":")[1];
    var isConflict = false;

	var sevName = $("#serName").prop('value');
	if ($.asc(sevName)) {
        $.alert(ERR_VIRTUAL_SEV_NAME_NOT_ASCII);
        var element = $("#serName");
        if (element) {
            element.focus();
            element.select();
        }
		return false;
    }

    if ($.ifip($("#ipAddr").prop('value'), true)) {
        $.alert(ERR_IP_FORMAT);
        var element = $("#ipAddr");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
    var vsAttrs = {};
    vsAttrs.internalClient = $.ip2ip($("#ipAddr").prop('value'));
    vsAttrs.portMappingProtocol = $("#protol").data('value');
    vsAttrs.serviceName = $("#serName").prop('value');
    vsAttrs.portMappingEnabled = ($("#vtlServ_en").prop("data-checked")) ? 1 : 0;
    if (($("#applyPort").prop('value') == "") || (!isPort($("#applyPort").prop('value'), "applyPort"))) {
        $.alert(ERR_VS_PORT_INVAD);
        var element = $("#applyPort");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }
	/*check port between 1-65535*/
	if (checkPortValid($("#applyPort")) == false)
	{
		return false;
	}
	/*end*/
    var tmpApplyPort = $("#applyPort").prop('value');
    if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
        if (tmpApplyPort.split("-").length == 1) {
            vsAttrs.externalPort = parseInt(tmpApplyPort, 10);
            vsAttrs.externalPortEnd = parseInt(tmpApplyPort, 10);
        } else {
            if (tmpApplyPort.split("-")[0] > tmpApplyPort.split("-")[1]) {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[1], 10);
                vsAttrs.externalPortEnd = parseInt(tmpApplyPort.split("-")[0], 10);
            } else {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[0], 10);
                vsAttrs.externalPortEnd = parseInt(tmpApplyPort.split("-")[1], 10);
            }
        }
        if (INCLUDE_USB_FTP_SERVER && vsAttrs.portMappingProtocol != "UDP") {
            if (checkConflictFtpDataPort(vsAttrs.externalPort, vsAttrs.externalPortEnd)) {
                var element = $("#applyPort");
                if (element) {
                    element.focus();
                    element.select();
                }
                return false;
            }
            if (vsAttrs.portMappingEnabled && checkConflictFtpPort(vsAttrs.externalPort, vsAttrs.externalPortEnd)) {
                isConflict = true;
            }
        }
    } else {
        if (tmpApplyPort.split("-").length == 1) {
            vsAttrs.externalPort = parseInt(tmpApplyPort, 10);
            vsAttrs.X_TP_ExternalPortEnd = parseInt(tmpApplyPort, 10);
        } else {
            if (tmpApplyPort.split("-")[0] > tmpApplyPort.split("-")[1]) {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[1], 10);
                vsAttrs.X_TP_ExternalPortEnd = parseInt(tmpApplyPort.split("-")[0], 10);
            } else {
                vsAttrs.externalPort = parseInt(tmpApplyPort.split("-")[0], 10);
                vsAttrs.X_TP_ExternalPortEnd = parseInt(tmpApplyPort.split("-")[1], 10);
            }
        }
        if (INCLUDE_USB_FTP_SERVER && vsAttrs.portMappingProtocol != "UDP") {
            if (checkConflictFtpDataPort(vsAttrs.externalPort, vsAttrs.X_TP_ExternalPortEnd)) {
                var element = $("#applyPort");
                if (element) {
                    element.focus();
                    element.select();
                }
                return false;
            }
            if (vsAttrs.portMappingEnabled && checkConflictFtpPort(vsAttrs.externalPort, vsAttrs.X_TP_ExternalPortEnd)) {
                isConflict = true;
            }
        }
    }

    if ((!isPort($("#interPort").prop('value'), "interPort"))) {
        $.alert(ERR_VS_INTER_PORT_INVAD);
        var element = $("#interPort");
        if (element) {
            element.focus();
            element.select();
        }
        return false;
    }

	/*check port between 1-65535*/
	if (checkPortValid($("#interPort")) == false)
	{
		return false;
	}
	/*end*/

    if (isConflict) {
        $.confirm(c_str.forwarding_ftp_conflict, function() {

            $.act(ACT_SET, FTP_SERVER, null, null, ["accessFromInternet=0"]);
            $.exe();

            if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
                if ($("#interPort").prop('value') != "")
                    vsAttrs.internalPort = vsAttrs.internalPortEnd = $("#interPort").prop('value');
                else {
                    vsAttrs.internalPort = vsAttrs.externalPort;
                    vsAttrs.internalPortEnd = vsAttrs.externalPortEnd;
                }
            } else {
                if ($("#interPort").prop('value') != "")
                    vsAttrs.internalPort = vsAttrs.X_TP_InternalPortEnd = $("#interPort").prop('value');
                else {
                    vsAttrs.internalPort = vsAttrs.externalPort;
                    vsAttrs.X_TP_InternalPortEnd = vsAttrs.X_TP_ExternalPortEnd;
                }
            }
            if (editFlag == 2) {
                if (tmpWanInfType == "ip") {
                    $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                } else if (tmpWanInfType == "ppp") {
                    $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                } else if (tmpWanInfType == "l2tp") {
                    $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                } else if (tmpWanInfType == "pptp") {
                    $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                }
                $.exe(function(ret) {
                    if (!ret) {
                        $.loadMain("virtualServer.htm");
                    }
                });
            } else if (editFlag == 1) {
                var type = curType;
                if (wanInfName == $("#wanInf").data('text')) {
                    if (type == "ip")
                        $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                    else if (type == "ppp")
                        $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                    else if (type == "l2tp")
                        $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                    else if (type == "pptp")
                        $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, curStk, null, vsAttrs);

                    $.exe(function(ret) {
                        if (!ret) $.loadMain("virtualServer.htm");
                    });
                } else {
                    if (type == "ip") {
                        $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, curStk, null);
                    } else if (type == "ppp") {
                        $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, curStk, null);
                    } else if (type == "l2tp") {
                        $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, curStk, null);
                    } else if (type == "pptp") {
                        $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, curStk, null);
                    }

                    $.exe(function(ret) {
                        if (!ret) {
                            if (tmpWanInfType == "ip") {
                                $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            } else if (tmpWanInfType == "ppp") {
                                $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            } else if (tmpWanInfType == "l2tp") {
                                $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            } else if (tmpWanInfType == "pptp") {
                                $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                            }

                            $.exe(function(ret) {
                                if (!ret) {
                                    $.loadMain("virtualServer.htm");
                                } else {
                                    vsAttrs.portMappingEnabled = vtlServCfg.portMappingEnabled;
                                    vsAttrs.externalPort = vtlServCfg.externalPort;
                                    vsAttrs.internalPort = vtlServCfg.internalPort;
                                    vsAttrs.internalClient = vtlServCfg.internalClient;
                                    if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
                                        vsAttrs.externalPortEnd = vtlServCfg.externalPortEnd;
                                        vsAttrs.internalPortEnd = vtlServCfg.internalPortEnd;
                                    } else {
                                        vsAttrs.X_TP_ExternalPortEnd = vtlServCfg.X_TP_ExternalPortEnd;
                                        vsAttrs.X_TP_InternalPortEnd = vtlServCfg.X_TP_InternalPortEnd;
                                    }

                                    if (type == "ip") {
                                        $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    } else if (type == "ppp") {
                                        $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    } else if (type == "l2tp") {
                                        $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    } else if (type == "pptp") {
                                        $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                    }
                                    $.exe();
                                }
                            });
                        }
                    });
                }
            }
        })
    } else {
        if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
            if ($("#interPort").prop('value') != "")
                vsAttrs.internalPort = vsAttrs.internalPortEnd = $("#interPort").prop('value');
            else {
                vsAttrs.internalPort = vsAttrs.externalPort;
                vsAttrs.internalPortEnd = vsAttrs.externalPortEnd;
            }
        } else {
            if ($("#interPort").prop('value') != "")
                vsAttrs.internalPort = vsAttrs.X_TP_InternalPortEnd = $("#interPort").prop('value');
            else {
                vsAttrs.internalPort = vsAttrs.externalPort;
                vsAttrs.X_TP_InternalPortEnd = vsAttrs.X_TP_ExternalPortEnd;
            }
        }
        if (editFlag == 2) {
            if (tmpWanInfType == "ip") {
                $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            } else if (tmpWanInfType == "ppp") {
                $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            } else if (tmpWanInfType == "l2tp") {
                $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            } else if (tmpWanInfType == "pptp") {
                $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
            }
            $.exe(function(ret) {
                if (!ret) {
                    $.loadMain("virtualServer.htm");
                }
            });
        } else if (editFlag == 1) {
            var type = curType;
            if (wanInfName == $("#wanInf").data('text')) {
                if (type == "ip")
                    $.act(ACT_SET, WAN_IP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                else if (type == "ppp")
                    $.act(ACT_SET, WAN_PPP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                else if (type == "l2tp")
                    $.act(ACT_SET, WAN_L2TP_CONN_PORTMAPPING, curStk, null, vsAttrs);
                else if (type == "pptp")
                    $.act(ACT_SET, WAN_PPTP_CONN_PORTMAPPING, curStk, null, vsAttrs);

                $.exe(function(ret) {
                    if (!ret) $.loadMain("virtualServer.htm");
                });
            } else {
                if (type == "ip") {
                    $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, curStk, null);
                } else if (type == "ppp") {
                    $.act(ACT_DEL, WAN_PPP_CONN_PORTMAPPING, curStk, null);
                } else if (type == "l2tp") {
                    $.act(ACT_DEL, WAN_L2TP_CONN_PORTMAPPING, curStk, null);
                } else if (type == "pptp") {
                    $.act(ACT_DEL, WAN_PPTP_CONN_PORTMAPPING, curStk, null);
                }

                $.exe(function(ret) {
                    if (!ret) {
                        if (tmpWanInfType == "ip") {
                            $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        } else if (tmpWanInfType == "ppp") {
                            $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        } else if (tmpWanInfType == "l2tp") {
                            $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        } else if (tmpWanInfType == "pptp") {
                            $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, tmpWanInfStk, vsAttrs);
                        }

                        $.exe(function(ret) {
                            if (!ret) {
                                $.loadMain("virtualServer.htm");
                            } else {
                                vsAttrs.portMappingEnabled = vtlServCfg.portMappingEnabled;
                                vsAttrs.externalPort = vtlServCfg.externalPort;
                                vsAttrs.internalPort = vtlServCfg.internalPort;
                                vsAttrs.internalClient = vtlServCfg.internalClient;
                                if (tmpWanInfType == "l2tp" || tmpWanInfType == "pptp") {
                                    vsAttrs.externalPortEnd = vtlServCfg.externalPortEnd;
                                    vsAttrs.internalPortEnd = vtlServCfg.internalPortEnd;
                                } else {
                                    vsAttrs.X_TP_ExternalPortEnd = vtlServCfg.X_TP_ExternalPortEnd;
                                    vsAttrs.X_TP_InternalPortEnd = vtlServCfg.X_TP_InternalPortEnd;
                                }

                                if (type == "ip") {
                                    $.act(ACT_ADD, WAN_IP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                } else if (type == "ppp") {
                                    $.act(ACT_ADD, WAN_PPP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                } else if (type == "l2tp") {
                                    $.act(ACT_ADD, WAN_L2TP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                } else if (type == "pptp") {
                                    $.act(ACT_ADD, WAN_PPTP_CONN_PORTMAPPING, null, pStk, vsAttrs);
                                }
                                $.exe();
                            }
                        });
                    }
                });
            }
        }
    }

});

/*add to check port num(xx or xx-xx) between 1-65535*/
function checkPortValid(element)
{
	var valueStr = element.prop('value');
	var minValue = 65536;
	var maxValue = 0;
	var value = 0;
	if (valueStr == "")
		return true;
	//alert("splitLen: "+valueStr.split("-").length);
	if (valueStr.split("-").length == 1)
	{
		value = parseInt(valueStr.split("-")[0],10);
		minValue = value < minValue? value:minValue;
		maxValue = value > maxValue? value:maxValue;
	}
	else
	{
		value = parseInt(valueStr.split("-")[0],10);
		minValue = value < minValue? value:minValue;
		maxValue = value > maxValue? value:maxValue;
			
		value = parseInt(valueStr.split("-")[1],10);
		minValue = value < minValue? value:minValue;
		maxValue = value > maxValue? value:maxValue;
	}
	//alert("minValue: "+minValue+" maxValue: "+maxValue);
	if (minValue < 1 || maxValue >65535)
	{
		$.alert(ERR_PORT_NUM_INVAD);
        if (element) 
		{
            element.focus();
            element.select();
        }
        return false;
	}
	return true;
}
/*end add*/
function isPort(val, type) {
    var c;
    var ch;
    if (type == "applyPort") {
        ch = "0123456789-";
    } else if (type == "interPort") {
        /* if empty, internal port equal to external port */
        if (val == "")
            return true;
        ch = "0123456789";
    }

    for (var i = 0; i < val.length; i++) {
        c = val.charAt(i);
        if (ch.indexOf(c) == -1)
            return false;
    }
    if ((val.split("-").length != 1) && (val.split("-").length != 2))
        return false;
    if ((val.split("-").length == 2) && (val.split("-")[0] == ""))
        return false;
    if ((val.split("-").length == 2) && (val.split("-")[1] == ""))
        return false;

    return true;
}

function checkConflictFtpDataPort(exPort, exPortEnd) {
    var conflict = false;
    if (exPortEnd == 0) {
        if ((59990 <= exPort) && (exPort <= 59999)) {
            conflict = true;
        }
    } else if (exPort == 0) {
        if ((59990 <= exPortEnd) && (exPortEnd <= 59999)) {
            conflict = true;
        }
    } else if (!((59999 < exPort) || (exPortEnd < 59990))) {
        conflict = true;
    }
    if (conflict) {
        $.alert(ERR_FTP_DATA_PORT_CONFLICT);
        return true;
    }

    return false;
}

function checkConflictFtpPort(exPort, exPortEnd) {
    var ftpServer = $.act(ACT_GET, FTP_SERVER, null, null, null);

    if ($.exe()) {
        return;
    }

    if ((ftpServer.enable == 1) && (ftpServer.accessFromInternet == 1)) {
        if (exPort == 0) {
            if (ftpServer.portNumber == exPortEnd) {
                return true;
            }
        } else if (exPortEnd == 0) {
            if (ftpServer.portNumber == exPort) {
                return true;
            }
        } else if ((exPort <= ftpServer.portNumber) && (ftpServer.portNumber <= exPortEnd)) {
            return true;
        }
    }

        return false;
}

function initTable() {
    selAll = 0;
    index = 0;
    param = [];
    allStk = [];
    allStkType = [];
    vtlServ_param = [];
    vtlServ_stack = [];
    vtlServ_stackType = [];
    vtlServ_stackIndex = 0;

    var wanInfStk;
    var array = new Array();
    var vtlServList_IP = $.act(ACT_GL, WAN_IP_CONN_PORTMAPPING, null, null);
    var vtlServList_PPP = $.act(ACT_GL, WAN_PPP_CONN_PORTMAPPING, null, null);
    if (INCLUDE_USB_3G_DONGLE) {
        var wan3glnkcfgList = $.act(ACT_GL, WAN_USB_3G_LINK_CFG, null, null, ["enable", "backupEnable"]);
    }
    if (INCLUDE_L2TP) {
        var vtlServList_L2TP = $.act(ACT_GL, WAN_L2TP_CONN_PORTMAPPING, null, null);
    }
    if (INCLUDE_PPTP) {
        var vtlServList_PPTP = $.act(ACT_GL, WAN_PPTP_CONN_PORTMAPPING, null, null);
    }
    $.exe(function(err) {
        if (err) return;
        var usb3gBackup = 0;
        if (INCLUDE_USB_3G_DONGLE) {
            $.each(wan3glnkcfgList, function() {
                if (this.enable == 1) {
                    usb3gBackup = this.backupEnable;
                    return false;
                }
            });
        }
        $.each(vtlServList_IP, function() {
            wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + "," + (this.__stack).split(",")[2] + ",0,0,0";
            var wanInf_IP = $.act(ACT_GET, WAN_IP_CONN, wanInfStk, null, ["name"]);
            var getInf = 0;
            if (INCLUDE_WAN_MODE) {
                var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
                var wanCommIntfCfgList = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);
            }
            if (!$.exe()) {
                getInf = 1;
                if (INCLUDE_WAN_MODE) {
                    var notShow = 0;
                    var mode = (sysMode.mode == "ETH") ? "Ethernet" : sysMode.mode;
                    var tmpStk = $.stkPop(wanInfStk, 2);
                    $.each(wanCommIntfCfgList, function() {
                        if (tmpStk == this.__stack && this.WANAccessType != mode) {
                            notShow = 1;
                            return;
                        }
                    });
                    if (notShow == 1) {
                        return;
                    }
                }
            }
            index++;
            var thisStk = "[" + this.__stack + "]";
            var externalPort = 0;
            var internalPort = 0;
            var intfName;
            if ((this.externalPort != 0) && (this.X_TP_ExternalPortEnd == 0)) {
                externalPort = this.externalPort;
            } else if ((this.externalPort == 0) && (this.X_TP_ExternalPortEnd != 0)) {
                externalPort = this.X_TP_ExternalPortEnd;
            } else if (this.externalPort == this.X_TP_ExternalPortEnd) {
                externalPort = this.externalPort;
            } else {
                externalPort = this.externalPort + "-" + this.X_TP_ExternalPortEnd;
            }

            if ((this.internalPort != 0) && (this.X_TP_InternalPortEnd == 0)) {
                internalPort = this.internalPort;
            } else if ((this.internalPort == 0) && (this.X_TP_InternalPortEnd != 0)) {
                internalPort = this.X_TP_InternalPortEnd;
            } else if (this.internalPort == this.X_TP_InternalPortEnd) {
                internalPort = this.internalPort;
            } else {
                internalPort = this.internalPort + "-" + this.X_TP_InternalPortEnd;
            }

            if (getInf == 1) {
                intfName = wanInf_IP.name;
            }
            allStk[index - 1] = this.__stack;
            allStkType[index - 1] = "ip";
            if (this.portMappingEnabled == 1) {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"ip\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ip\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ip\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            } else {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"ip\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ip\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ip\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            }
        });

        $.each(vtlServList_PPP, function() {
            wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + "," + (this.__stack).split(",")[2] + ",0,0,0";
            var wanInf_PPP = $.act(ACT_GET, WAN_PPP_CONN, wanInfStk, null, ["name"]);
            var getInf = 0;
            if (INCLUDE_WAN_MODE) {
                var sysMode = $.act(ACT_GET, SYS_MODE, null, null, ["mode"]);
                var wanCommIntfCfgList = $.act(ACT_GL, WAN_COMMON_INTF_CFG, null, null, ["WANAccessType"]);
            }
            if (!$.exe()) {
                getInf = 1;
                var notShow = 0;
                if (INCLUDE_WAN_MODE) {
                    var mode = (sysMode.mode == "ETH") ? "Ethernet" : sysMode.mode;
                    var tmpStk = $.stkPop(wanInfStk, 2);
                    $.each(wanCommIntfCfgList, function() {
                        /* USB_3G is special, because it can be used as backup when DSL and ETH sysmode. So far, we
                        only need to deal with ppp connection, because 3G is connected as a ppp. */
                        if (tmpStk == this.__stack && this.WANAccessType != mode && (this.WANAccessType != "USB_3G" || usb3gBackup != 1)) {
                            notShow = 1;
                            return;
                        }
                    });
                } /*else {
                    $.each(wanCommIntfCfgList, function() {
                        if (tmpStk == this.__stack && this.WANAccessType == "USB_3G" && usb3gBackup != 1) {
                            notShow = 1;
                            return;
                        }
                    });
                }*/
                if (notShow == 1) {
                    return;
                }
            }

            index++;
            var thisStk = "[" + this.__stack + "]";
            var externalPort = 0;
            var internalPort = 0;
            var intfName;
            if ((this.externalPort != 0) && (this.X_TP_ExternalPortEnd == 0)) {
                externalPort = this.externalPort;
            } else if ((this.externalPort == 0) && (this.X_TP_ExternalPortEnd != 0)) {
                externalPort = this.X_TP_ExternalPortEnd;
            } else if (this.externalPort == this.X_TP_ExternalPortEnd) {
                externalPort = this.externalPort;
            } else {
                externalPort = this.externalPort + "-" + this.X_TP_ExternalPortEnd;
            }

            if ((this.internalPort != 0) && (this.X_TP_InternalPortEnd == 0)) {
                internalPort = this.internalPort;
            } else if ((this.internalPort == 0) && (this.X_TP_InternalPortEnd != 0)) {
                internalPort = this.X_TP_InternalPortEnd;
            } else if (this.internalPort == this.X_TP_InternalPortEnd) {
                internalPort = this.internalPort;
            } else {
                internalPort = this.internalPort + "-" + this.X_TP_InternalPortEnd;
            }

            if (getInf == 1) {
                intfName = wanInf_PPP.name;
            }
            allStk[index - 1] = this.__stack;
            allStkType[index - 1] = "ppp";

            if (this.portMappingEnabled == 1) {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"ppp\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ppp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ppp\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            } else {
                array.push([{
                    "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                    "width": "5%"
                }, {
                    "text": index,
                    "width": "5%"
                }, {
                    "text": this.serviceName,
                    "width": "20%"
                }, {
                    "text": externalPort,
                    "width": "10%"
                }, {
                    "text": this.internalClient,
                    "width": "20%"
                }, {
                    "text": internalPort,
                    "width": "10%"
                }, {
                    "text": this.portMappingProtocol,
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"ppp\", " + thisStk + ", " + index + ");'></span>",
                    "width": "10%"
                }, {
                    "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"ppp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"ppp\", " + thisStk + ");'></span>",
                    "width": "10%"
                }]);
            }
        });

        if (INCLUDE_L2TP) {
            $.each(vtlServList_L2TP, function() {
                wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + ",0,0,0,0";
                var wanInf_L2TP = $.act(ACT_GET, WAN_L2TP_CONN, wanInfStk, null, ["name"]);
                var getInf = 0;
                if (!$.exe()) {
                    getInf = 1;
                }

                var thisStk = "[" + this.__stack + "]";
                index++;
                var externalPort = 0;
                var internalPort = 0;
                var intfName;
                if ((this.externalPort != 0) && (this.externalPortEnd == 0)) {
                    externalPort = this.externalPort;
                } else if ((this.externalPort == 0) && (this.externalPortEnd != 0)) {
                    externalPort = this.externalPortEnd;
                } else if (this.externalPort == this.externalPortEnd) {
                    externalPort = this.externalPort;
                } else {
                    externalPort = this.externalPort + "-" + this.externalPortEnd;
                }

                if ((this.internalPort != 0) && (this.internalPortEnd == 0)) {
                    internalPort = this.internalPort;
                } else if ((this.internalPort == 0) && (this.internalPortEnd != 0)) {
                    internalPort = this.internalPortEnd;
                } else if (this.internalPort == this.internalPortEnd) {
                    internalPort = this.internalPort;
                } else {
                    internalPort = this.internalPort + "-" + this.internalPortEnd;
                }

                if (getInf == 1) {
                    intfName = wanInf_L2TP.name;
                }
                allStk[index - 1] = this.__stack;
                allStkType[index - 1] = "l2tp";

                if (this.portMappingEnabled == 1) {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"l2tp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"l2tp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"l2tp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                } else {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"l2tp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"l2tp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"l2tp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                }
            });
        }

        if (INCLUDE_PPTP) {
            $.each(vtlServList_PPTP, function() {

                wanInfStk = (this.__stack).split(",")[0] + "," + (this.__stack).split(",")[1] + ",0,0,0,0";
                var wanInf_PPTP = $.act(ACT_GET, WAN_PPTP_CONN, wanInfStk, null, ["name"]);
                var getInf = 0;
                if (!$.exe()) {
                    getInf = 1;
                }

                var thisStk = "[" + this.__stack + "]";
                index++;
                var externalPort = 0;
                var internalPort = 0;
                var intfName;
                if ((this.externalPort != 0) && (this.externalPortEnd == 0)) {
                    externalPort = this.externalPort;
                } else if ((this.externalPort == 0) && (this.externalPortEnd != 0)) {
                    externalPort = this.externalPortEnd;
                } else if (this.externalPort == this.externalPortEnd) {
                    externalPort = this.externalPort;
                } else {
                    externalPort = this.externalPort + "-" + this.externalPortEnd;
                }

                if ((this.internalPort != 0) && (this.internalPortEnd == 0)) {
                    internalPort = this.internalPort;
                } else if ((this.internalPort == 0) && (this.internalPortEnd != 0)) {
                    internalPort = this.internalPortEnd;
                } else if (this.internalPort == this.internalPortEnd) {
                    internalPort = this.internalPort;
                } else {
                    internalPort = this.internalPort + "-" + this.internalPortEnd;
                }

                if (getInf == 1) {
                    intfName = wanInf_PPTP.name;
                }

                if (this.portMappingEnabled == 1) {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon enable-icon' id='en_" + index + "' onclick='doEnable(\"pptp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"pptp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"pptp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                } else {
                    array.push([{
                        "text": '<span><div><input type="checkbox" id="' + index + '"/><label></label></div></span>',
                        "width": "5%"
                    }, {
                        "text": index,
                        "width": "5%"
                    }, {
                        "text": this.serviceName,
                        "width": "20%"
                    }, {
                        "text": externalPort,
                        "width": "10%"
                    }, {
                        "text": this.internalClient,
                        "width": "20%"
                    }, {
                        "text": internalPort,
                        "width": "10%"
                    }, {
                        "text": this.portMappingProtocol,
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon disable-icon' id='en_" + index + "' onclick='doEnable(\"pptp\", " + thisStk + ", " + index + ");'></span>",
                        "width": "10%"
                    }, {
                        "text": "<span class='table-grid-icon edit-modify-icon' id='edit_" + index + "' onclick='doEdit(\"pptp\", " + thisStk + ");'></span><span class='table-grid-icon edit-trash-icon' id='del_" + index + "' onclick='doDel(\"pptp\", " + thisStk + ");'></span>",
                        "width": "10%"
                    }]);
                }

                allStk[index - 1] = this.__stack;
                allStkType[index - 1] = "pptp";
            });
        }

        $.initTableBody($("#table-virtual"), array);
        return array;
    });
}

function initServiceTable() {
    var array = new Array();
    for (var i = 0; i < serviceArray.length; i++) {
        var id = i + 1;
        array.push([{
            "text": id,
            "width": "30%"
        }, {
            "text": serviceArray[i][0],
            "width": "40%"
        }, {
            "text": "<span class='choose' >" + s_str.choose + "</span>",
            "width": "30%"
        }]);
    }
    $.initTableBody($("#table-service"), array);
    $('span.choose').click(function() {
        var serType = $(this).parents("tr").find("td:eq(1)").text();
        var serId = $(this).parents("tr").find("td:eq(0)").text();
        if (serId > 0) {
            if (serType == serviceArray[serId - 1][0]) {
                $("#serName").prop('value', serviceArray[serId - 1][0]);
                $("#applyPort").prop('value', serviceArray[serId - 1][1]);
                $("#interPort").prop('value', serviceArray[serId - 1][2]);
                $("#accessDevList").fadeOut(200, function() {
                    $("#accessDevList").removeClass("on-mask msg-container").addClass("nd");
                });
                $("#mask").hide();
            }
        }
    });
}

function selectAll() {
    var i;
    for (i = 0; i < allStk.length; i++) {
        if ($('#checkbox_st').prop('data-checked'))
            $("#" + (i + 1)).prop('checked', true);
        else
            $("#" + (i + 1)).prop('checked', false);
    }
    $('#checkbox_st').prop('checked', $('#checkbox_st').prop('data-checked'));

    $.each($('input.checkbox-checkbox'), function() {
        $(this).data('tpCheckbox').refresh();
    });
}
</script>

<h3 id="et">Virtual Server</h3>
<div class="content-container">
    <form class="pure-form pure-form-aligned">
        <div class="table-op" id="addItem">
            <div class="table-btn">
                <span id="add" class="add-icon"></span>
                <label class="T_add">Add</label>
                <span id="delAll" class="delete-all-icon"></span>
                <label class="T_del">Delete</label>
            </div>
        </div>
        <table id="table-virtual">
            <thead></thead>
            <tbody id="body-virtual">
                <tr id="edit-container-virtual" class="nd">
                    <td colspan="9">
                        <div class="nd">
                            <b class="T_intfname">Interface Name:</b>
                            <select class="xl" id="wanInf">
                            </select>
                        </div>
                        <div>
                            <b class="T_servname">Service Name:</b>
                            <input class="xl" type="text" id="serName" maxlength="15"/>
                            <button type="submit" class="blue T_viewserv xxl" id="view">View Service</button>
                        </div>
                        <div>
                            <b class="T_exterport">External Port:</b>
                            <input class="xl" type="text" id="applyPort" />
                            <span id="t_iprange">(XX-XX or XX)</span>
                        </div>
                        <div>
                            <b class="T_interip">Internal IP:</b>
                            <input class="xl" type="text" id="ipAddr" />
                        </div>
                        <div>
                            <b class="T_interport">Internal Port:</b>
                            <input class="xl" type="text" id="interPort" />
                            <div style="display: inline-block;width: 180px;vertical-align: middle;line-height: 14px;"><span id="t_port">(XX)</span></div>
                        </div>

                        <b class="T_proto">Protocol:</b>
                        <select class="xl" id="protol">
                            <option value="TCP" id="TCP">TCP</option>
                            <option value="UDP" id="UDP">UDP</option>
                            <option value="TCP or UDP" class="T_all" id="ALL">ALL</option>
                        </select>

                        <div>
                            <b></b>
                            <input class="xl" type="checkbox" id="vtlServ_en" checked />
                            <label class="T_enthisentry">Enable this Entry</label>
                        </div>
                        <div class="inline-btn-right">
                            <button type="submit" class="green T_cancel" id="cancel">Cancel</button>
                            <button type="submit" class="green T_ok" id="ok">OK</button>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </form>
</div>
<div>
    <form class="pure-form pure-form-aligned">
        <div id="accessDevList" class="nd">
            <div id="closeDeviceList" class="table-op">
                <div class="table-btn">
                    <span class="close-icon table-icon"></span>
                    <label class="T_close">Close</label>
                </div>
            </div>

            <table id="table-service">
                <thead></thead>
                <tbody id="bodyAccessDevicesList">
                </tbody>
            </table>
        </div>
    </form>
</div>

<script type="text/javascript">
var headArray = [{
    "text": '<div><input type="checkbox" id="checkbox_st" /><label></label></div>',
    "width": "5%"
}, {
    "text": table_str.id,
    "width": "5%"
}, {
    "text": table_str.servname,
    "width": "10%"
}, {
    "text": table_str.exterport,
    "width": "20%"
}, {
    "text": table_str.interip,
    "width": "20%"
}, {
    "text": table_str.interport,
    "width": "10%"
}, {
    "text": table_str.protocol,
    "width": "10%"
}, {
    "text": table_str.status,
    "width": "10%"
}, {
    "text": table_str.modify,
    "width": "15%"
}];
var AccessDevicesListHeadArray = [{
    "text": table_str.id,
    "width": "15%"
}, {
    "text": table_str.servname,
    "width": "40%"
}, {
    "text": table_str.operation,
    "width": "45%"
}];

$.initTableHead($("#table-virtual"), headArray);
$("#table-virtual").tpTable(initTable);

$.initTableHead($("#table-service"), AccessDevicesListHeadArray);
$("#table-service").tpTable(initServiceTable);

$("#checkbox_st").on('click', function(e) {
    selectAll();
});
$.tpInit();
</script>
>>>>>>> 59bffef8551d69606b594c223f73f1df7ea23746
