function bounce(elem, cb) {
    if ($(elem).is(":animated")) return elem;
    var CSS = {
        elem: $(elem),
        left: $(elem).css("left"),
        top: $(elem).css("top"),
        position: $(elem).css("position")
    };
    return $(elem).css({
        left: $(elem).position().left,
        top: $(elem).position().top,
        position: "absolute"
    }).addClass("invalid").effect("bounce", {
        times: 3,
        direction: "left",
        distance: 10
    }, 300, callback(this, function(CSS, cb) {
        $(CSS.elem).css({
            left: CSS.left,
            top: CSS.top,
            position: CSS.position
        }).removeClass("invalid"), is.func(cb) && cb.apply(this)
    }, CSS, cb)), elem
}

function detectLanguage() {
    var langAttachments = {
            ru: "rus",
            en: "eng",
            uk: "ukr",
            tr: "tur",
            fr: "fra",
            ar: "ara",
            fa: "fas",
            kk: "kaz"
        },
        browserLang = navigator.language ? navigator.language : navigator.userLanguage;
    browserLang = browserLang.toLowerCase().substr(0, 2);
    var langAttacmentBrowserLang = browserLang in langAttachments ? langAttachments[browserLang] : "eng";
    return langAttacmentBrowserLang in window.langs ? langAttacmentBrowserLang : "eng"
}

function addjscssfile(filename, filetype) {
    if ("js" == filetype) {
        var fileref = document.createElement("script");
        fileref.setAttribute("type", "text/javascript"), fileref.setAttribute("src", filename)
    }
    else if ("css" == filetype) {
        var fileref = document.createElement("link");
        fileref.setAttribute("rel", "stylesheet"), fileref.setAttribute("type", "text/css"), fileref.setAttribute("href", filename)
    }
    "undefined" != typeof fileref && document.getElementsByTagName("head")[0].appendChild(fileref)
}

function removejscssfile(filename, filetype) {
    for (var targetelement = "js" == filetype ? "script" : "css" == filetype ? "link" : "none", targetattr = "js" == filetype ? "src" : "css" == filetype ? "href" : "none", allsuspects = document.getElementsByTagName(targetelement), i = allsuspects.length; i >= 0; i--) allsuspects[i] && null != allsuspects[i].getAttribute(targetattr) && -1 != allsuspects[i].getAttribute(targetattr).indexOf(filename) && allsuspects[i].parentNode.removeChild(allsuspects[i])
}

function checkSupportedBrowser() {
    return jQuery.browser.msie && parseInt(jQuery.browser.version) < 8 ? ($("#workbox").hide(), $("#overlaybox").hide(), $("#switcher").hide(), $("#unsupported").show(), !1) : !0
}

function reload(hostname) {
    var just_do_it = is.unset(hostname);
    if (("127.0.0.1" == location.hostname || "localhost" == location.hostname) && (hostname = location.hostname), window.SAVEME && SAVEME.lock(), just_do_it) location.reload(!0);
    else {
        hostname = hostname ? hostname : location.hostname;
        var href = location.protocol + "//" + hostname + ":" + location.port + location.pathname + location.search + location.hash;
        location.replace(href)
    }
    window.SAVEME && SAVEME.unlock()
}

function goTop(acceleration, time) {
    acceleration = acceleration || .1, time = time || 12;
    var dx = 0,
        dy = 0,
        bx = 0,
        by = 0,
        wx = 0,
        wy = 0;
    document.documentElement && (dx = document.documentElement.scrollLeft || 0, dy = document.documentElement.scrollTop || 0), document.body && (bx = document.body.scrollLeft || 0, by = document.body.scrollTop || 0);
    var wx = window.scrollX || 0,
        wy = window.scrollY || 0,
        x = Math.max(wx, Math.max(bx, dx)),
        y = Math.max(wy, Math.max(by, dy)),
        speed = 1 + acceleration;
    if (window.scrollTo(Math.floor(x / speed), Math.floor(y / speed)), x > 0 || y > 0) {
        var invokeFunction = "top.goTop(" + acceleration + ", " + time + ")";
        window.setTimeout(invokeFunction, time)
    }
    return !1
}

function pageIfResizeGoTop() {
    $(window).scrollTop() + 50 > $("#page").height() && Math.abs(window.pageHeight - $("#page").height()) > 100 && goTop(), window.pageHeight = $("#page").height();
    setTimeout(function() {
        pageIfResizeGoTop()
    }, 1e3)
}
var TITLE = document.title,
    Ok = function(status) {
        return 11 == status || 12 == status || 13 == status || 15 == status || 20 == status
    },
    DRAGGER = new function() {
        var $$ = {
            list: new Array,
            drag: null
        };
        this.add = function(obj) {
            if (is.jquery(obj))
                for (var i = 0; i < obj.length; i++) - 1 == indexOf($$.list, obj.get(i)) && $$.list.push(obj.get(i));
            return this
        }, this.remove = function(obj) {
            if (is.jquery(obj))
                for (var i = 0; i < obj.length; i++) {
                    var index = indexOf($$.list, obj.get(i));
                    index >= 0 && $$.list.splice(index, 1)
                }
            return this
        }, $(document).bind("mousedown.dragger", callback(this, function(e) {
            if (e.isPropagationStopped()) return !0;
            for (var i = 0; i < $$.list.length; i++)
                if ($$.list[i] == e.target || $($$.list[i]).has(e.target).length) {
                    var target = $($$.list[i]),
                        tPos = target.offset(),
                        pPos = target.parent().offset();
                    return $$.drag = {
                        index: i,
                        target: target,
                        offsetX: pPos.left + e.pageX - tPos.left,
                        offsetY: pPos.top + e.pageY - tPos.top,
                        cursor: $("body").css("cursor")
                    }, $("body").css({
                        cursor: target.css("cursor")
                    }), target.trigger("down.dragger", {
                        event: e.originalEvent,
                        left: $$.drag.offsetX,
                        top: $$.drag.offsetY
                    }), !1
                }
        })).bind("mouseup.dragger", callback(this, function(e) {
            return $$.drag ? ($("body").css({
                cursor: $$.drag.cursor
            }), $$.drag.target.trigger("up.dragger", {
                event: e.originalEvent,
                left: e.pageX - $$.drag.offsetX,
                top: e.pageY - $$.drag.offsetY
            }), $$.drag = null, !1) : void 0
        })).bind("mousemove.dragger", callback(this, function(e) {
            return $$.drag ? ($$.drag.target.trigger("move.dragger", {
                event: e.originalEvent,
                left: e.pageX - $$.drag.offsetX,
                top: e.pageY - $$.drag.offsetY
            }), !1) : void 0
        })).bind("mouseleave", function() {
            $(document).trigger("mouseup")
        })
    },
    HELPER = new function() {
        function unsetHiding() {
            clearTimeout($$.timerID)
        }

        function setHiding() {
            $$.timerID = setTimeout(callback(self, self.hide), 600)
        }
        var self = this,
            $$ = {
                timerID: null,
                tip: null
            };
        this.hide = function() {
            $$.tip.find(">.tip_content").html(""), $$.tip.hide().removeClass("top bottom left right").appendTo("body")
        }, $(document).bind("ready", callback(this, function() {
            $$.tip = $("			<div id='tip' class='unselectable'>				<div class='tip_content' unselectable='on'></div>				<div class='tip_arrow'></div>			</div>		").appendTo("body").bind({
                mouseleave: callback(this, setHiding),
                mouseenter: callback(this, unsetHiding)
            }), $$.arrow = $$.tip.find(">.tip_arrow"), $("body").bind("mouseover", callback(this, function(e) {
                var target = $(e.target),
                    tipcontent = target.find(">.tip").length ? target.find(">.tip>*") : target.attr("tip");
                if (tipcontent) {
                    unsetHiding();
                    var direction = (target.parents().filter(function() {
                            return "hidden" == $(this).css("overflow")
                        }), "top"),
                        smooth = "center";
                    target.attr("direct") ? direction = target.attr("direct") : target.find(">.tip").attr("direct") && (direction = target.find(">.tip").attr("direct")), target.attr("smooth") ? smooth = target.attr("smooth") : target.find(">.tip").attr("smooth") && (smooth = target.find(">.tip").attr("smooth"));
                    var left, top, pos = target.position(),
                        postype = target.css("position");
                    switch ($$.tip.find(">.tip_content").html(is.string(tipcontent) ? tipcontent : $(tipcontent).clone(!0)).bind({
                        click: function() {
                            return !1
                        },
                        mousedown: function() {
                            return !1
                        }
                    }), $$.tip.removeClass("d_top d_bottom d_left d_right s_center s_left s_right s_top s_bottom").addClass("d_" + direction).addClass("s_" + smooth).appendTo(target), direction) {
                        case "top":
                            top = 0 - $$.tip.height() - $$.arrow.height();
                            break;
                        case "bottom":
                            top = target.height() + $$.arrow.height();
                            break;
                        case "left":
                            left = 0 - $$.tip.width() - $$.arrow.width();
                            break;
                        case "right":
                            left = target.width() + $$.arrow.width()
                    }
                    switch (direction) {
                        case "top":
                        case "bottom":
                            left = "left" == smooth ? target.width() / 2 - $$.arrow.width() : "right" == smooth ? target.width() / 2 - $$.tip.width() + $$.arrow.width() : target.width() / 2 - $$.tip.width() / 2;
                            break;
                        case "left":
                        case "right":
                            top = "top" == smooth ? target.height() / 2 - $$.arrow.width() : "bottom" == smooth ? target.height() / 2 - $$.tip.height() + $$.arrow.width() : target.height() / 2 - $$.tip.height() / 2
                    }
                    "static" == postype && (top = pos.top + top, left = pos.left + left), $$.tip.css({
                        left: left,
                        top: top,
                        "z-index": 9999999999
                    }).show()
                }
                return !0
            })).bind("mouseout", callback(this, function(e) {
                var target = $(e.target),
                    tipcontent = target.find(">.tip").length ? target.find(">.tip") : target.attr("tip");
                return tipcontent && setHiding(), !0
            }))
        }))
    },
    NOTIFY = new function() {
        var $nPage = {
                countMess: 0,
                led: "#ledNotify",
                inputSearch: "#searchbar .field input",
                page: "#page .cover",
                notifybox: "#page .notifybox"
            },
            $notifybox = "#notifybox";
        this.show = function(id) {
            var item = $notifybox.find(">" + id + ".item");
            return item.length && !item.hasClass("visible") && ($nPage.countMess++, item.appendTo($notifybox).addClass("visible").css({
                opacity: ""
            }).show(), item.find(">.desc").unbind("click").bind("click", function(e) {
                $(e.target).parents(".item").find(">.title").trigger("click")
            })), this
        }, this.hide = function(id) {
            var item = $notifybox.find(">" + id + ".item");
            return item.length && item.hasClass("visible") && ($nPage.countMess--, item.removeClass("visible").slideUp(400, function() {
                $(this).hide()
            })), this
        }, this.messboxclose = function() {
            $($nPage.page).show(), $($nPage.notifybox).hide(), $($nPage.led + " .ledCount").show(), $($nPage.led + " .ledClose").hide()
        }, this.messboxInit = function() {
            $($nPage.led + " .ledCount").unbind("click").bind("click", callback(this, function() {
                $($nPage.page).hide(), $($nPage.notifybox).show(), $($nPage.led + " .ledCount").hide(), $($nPage.led + " .ledClose").show()
            })), $($nPage.led + " .ledClose").unbind("click").bind("click", callback(this, function() {
                this.messboxclose(), this.messbox()
            })), this.messbox()
        }, this.messbox = function() {
            if ($nPage.countMess > 0) {
                var $notyvisible = $notifybox.find(".item.visible");
                $($nPage.led).show(), $($nPage.inputSearch).css("width", "568px"), $($nPage.led).addClass("led-warning"), $($nPage.led + ">.ledCount").html($nPage.countMess);
                var $lastnoty = $notyvisible.last();
                if ($notyvisible.length > 1)
                    for (var i = $notyvisible.length - 1; i > -1; i--) {
                        var priority = $notyvisible.eq(i).attr("priority") || 0;
                        priority > $lastnoty.attr("priority") && ($lastnoty = $notyvisible.eq(i))
                    }
                $($nPage.led + ">.ledTip>span").empty().append($lastnoty.find(".desc").clone()), $($nPage.led + ">.ledTip>span").unbind("click").bind("click", callback(this, function() {
                    var $item = $lastnoty;
                    $item.find(".title").trigger("click"), ($item.hasClass("defpass") || $item.hasClass("SIM") || $item.hasClass("ntp")) && ($($nPage.page).hide(), $($nPage.notifybox).show(), $($nPage.led + " .ledCount").hide(), $($nPage.led + " .ledClose").show())
                }))
            }
            else $($nPage.led).hide(), $($nPage.inputSearch).css("width", "618px"), $($nPage.led).removeClass("led-warning"), $($nPage.led + ">.ledCount").html($nPage.countMess), this.messboxclose()
        }, this.visible = function(id, visible) {
            return is.set(visible) ? (visible ? this.show(id) : this.hide(id), this.messbox(), this) : $notifybox.find(">" + id + ".item").is(":visible")
        }, $(document).bind("ready", callback(this, function() {
            $notifybox = $($notifybox)
        }))
    },
    DIALOG = new function() {
        function showOverlay() {
            $overlay.is(":hidden") && ($("body").css({
                overflow: "auto"
            }), $windowbox.css({
                width: "100%",
                height: "100%"
            }), $overlay.show())
        }

        function hideOverlay() {
            0 == $windowbox.find(">.window:visible").length && $overlay.is(":visible") && ($("body").css({
                overflow: "auto"
            }), $windowbox.css({
                width: "auto",
                height: "auto"
            }), $overlay.hide())
        }
        var $windowbox = "#windowbox",
            $overlay = "#windowbox>.overlay";
        this.loading = function(id, visible) {
            var win = $windowbox.find(">" + id + ".window"),
                overlay = win.find(".loading");
            return visible ? (0 == overlay.length && (overlay = $("<div class='loading'></div>").appendTo(win)), overlay.show()) : overlay.hide(), this
        }, this.caption = function(id, name) {
            var win = $windowbox.find(">" + id + ".window");
            return win.find(".header .caption").attr("langkey", name).text(lng(name)), this
        }, this.size = function(id, w, h) {
            var win = $windowbox.find(">" + id + ".window");
            return win.find(".body").css({
                width: w,
                height: h
            }), this
        }, this.show = function(id, cb) {
            var win = $windowbox.find(">" + id + ".window");
            return win.is(":hidden") && ($windowbox.show(), win.find(".header .close").unbind("click").bind("click", callback(this, function(id, win, autoclose) {
                win.trigger("close.dialog"), autoclose && this.hide(id)
            }, id, win, is.bool(cb) ? cb : !1)), win.find(".body, .controls, .footer, .taber, .close").unbind("mousedown.dragger").bind({
                "mousedown.dragger": function(e) {
                    return e.stopPropagation(), !0
                }
            }), DRAGGER.remove(win).add(win.unbind("move.dragger").bind({
                "move.dragger": function(e, attr) {
                    return is.unset(attr) ? !1 : void $(e.target).css({
                        left: attr.left,
                        top: attr.top
                    })
                }
            })), getCookie("viewmode", "mobile2") || win.css({
                left: ($(document).width() - win.width()) / 2,
                top: ($(document).height() - win.height()) / 4
            }), showOverlay(), win.show(), is.func(cb) && cb()), this
        }, this.hide = function(id) {
            var win = window.win = $windowbox.find(">" + id + ".window");
            return win.is(":visible") && (win.hide(), hideOverlay()), $windowbox.find(".window").is(":visible") || $windowbox.hide(), this
        }, this.visible = function(id, visible) {
            return visible ? this.show(id) : this.hide(id), this
        }, $(document).bind("ready", callback(this, function() {
            $windowbox = $($windowbox), $overlay = $($overlay)
        }))
    },
    FASTEDITOR = new function() {
        function unbind(target) {
            return target.unbind("keypress.fastedit keyup.fastedit focusout.fastedit")
        }

        function cancel(target, ovalue) {
            return unbind(target).val(ovalue).blur().trigger("cancel.fastedit"), !1
        }

        function apply(target) {
            return unbind(target).blur().trigger("apply.fastedit"), !1
        }
        $(document).bind("ready", callback(this, function() {
            NOTIFY.messboxInit(), $("body").bind("click", callback(this, function(e) {
                var target = $(e.target);
                if (target.attr("fastedit")) {
                    var value = target.val();
                    unbind(target).bind("keypress.fastedit", callbackEx(this, function(e, ovalue) {
                        if (!e.isPropagationStopped()) {
                            if (27 == e.keyCode) return cancel($(e.target), ovalue);
                            if (13 == e.keyCode) return apply($(e.target), ovalue)
                        }
                    }, value)).bind("keyup.fastedit", callbackEx(this, function(e, ovalue) {
                        return e.isPropagationStopped() || 27 != e.keyCode ? void 0 : cancel($(e.target), ovalue)
                    }, value)).bind("focusout.fastedit", callbackEx(this, function(e, ovalue) {
                        cancel($(e.target), ovalue)
                    }, value))
                }
                return !0
            }))
        }))
    },
    WAITER = new function() {
        var $$ = {
            interval: null,
            timeout: null,
            timeout_cb: null,
            time: 0
        };
        this.stop = function() {
            return clearInterval($$.interval), clearTimeout($$.timeout), clearTimeout($$.timeout_cb), $("#overlaybox").fadeOut(400), $("#overlaybox").delay(400).css("display", "none"), $("#modalOverlayBox").height("auto"), $("#overlaybox .msg").attr("langkey", "airMsgLoading").html(lng("airMsgLoading")), document.title = TITLE, this
        }, this.start = function(msg, timeout, cb) {
            clearTimeouts(), pageIfResizeGoTop();
            var msg = msg || "pleaseWait",
                cb = cb;
            return $$.time = Math.round(timeout / 1e3), $("#overlaybox .msg").html(lng(msg)).attr("langkey", msg), $("#overlaybox .timer").text(lookTime($$.time).toString()), timeout && !cb && (cb = function() {
                location.reload(!0)
            }), cb && ($$.timeout_cb = setTimeout(cb, timeout)), $$.interval = setInterval(callback(this, function() {
                var leftime = lookTime(--$$.time).toString();
                document.title = TITLE + ": " + leftime, $("#overlaybox .timer").text(leftime), 0 == $$.time && clearInterval($$.interval)
            }), 1e3), $("#overlaybox").css("display", "block").fadeIn(400), this
        }
    },
    LOGIC = {
        start: function() {
            return REFRESH.start(), this
        },
        stop: function() {
            return REFRESH.stop(), clearTimeouts(), pageIfResizeGoTop(), this
        }
    };